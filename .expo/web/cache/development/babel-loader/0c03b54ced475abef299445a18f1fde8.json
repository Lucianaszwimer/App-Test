{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"size\", \"style\", \"testID\"];\nimport React, { memo, forwardRef } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { usePropsResolution, useStyledSystemPropsResolver } from \"../../../hooks\";\nimport { getColor } from \"../../../theme\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useTheme } from \"../../../hooks\";\n\nvar Spinner = function Spinner(props, ref) {\n  var _usePropsResolution = usePropsResolution('Spinner', props),\n      color = _usePropsResolution.color,\n      size = _usePropsResolution.size,\n      style = _usePropsResolution.style,\n      testID = _usePropsResolution.testID,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var resolvedColor = getColor(color, useTheme().colors, useTheme());\n  var resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(ActivityIndicator, {\n    testID: testID,\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\nexport default memo(forwardRef(Spinner));","map":{"version":3,"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;;AAEA,SACEC,kBADF,EAEEC,4BAFF;AAIA,SAASC,QAAT;AAEA,SAASC,qBAAT;AACA,SAASC,QAAT;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAuBC,GAAvB,EAAoC;EAClD,0BAAyDP,kBAAkB,CACzE,SADyE,EAEzEM,KAFyE,CAA3E;EAAA,IAAQE,KAAR,uBAAQA,KAAR;EAAA,IAAeC,IAAf,uBAAeA,IAAf;EAAA,IAAqBC,KAArB,uBAAqBA,KAArB;EAAA,IAA4BC,MAA5B,uBAA4BA,MAA5B;EAAA,IAAuCC,aAAvC;;EAIA,IAAMC,aAAa,GAAGX,QAAQ,CAACM,KAAD,EAAQJ,QAAQ,GAAGU,MAAnB,EAA2BV,QAAQ,EAAnC,CAA9B;EACA,IAAMW,aAAa,GAAGd,4BAA4B,CAACW,aAAD,CAAlD;;EAEA,IAAIT,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,OACET,oBAACmB,iBAAD;IACEL,MAAM,EAAEA,MADV;IAEEM,UAAU,MAFZ;IAGEC,kBAAkB,EAAC,SAHrB;IAIEV,KAAK,EAAEK,aAJT;IAKEN,GAAG,EAAEA,GALP;IAMEE,IAAI,EAAEA,IANR;IAOEC,KAAK,EAAE,CAACK,aAAD,EAAgBL,KAAhB;EAPT,EADF;AAZF;;AAyBA,eAAeZ,IAAI,CAACC,UAAU,CAACM,OAAD,CAAX,CAAnB","names":["React","memo","forwardRef","usePropsResolution","useStyledSystemPropsResolver","getColor","useHasResponsiveProps","useTheme","Spinner","props","ref","color","size","style","testID","resolvedProps","resolvedColor","colors","resolvedStyle","ActivityIndicator","accessible","accessibilityLabel"],"sources":["index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport {\n  usePropsResolution,\n  useStyledSystemPropsResolver,\n} from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport type { ISpinnerProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props: ISpinnerProps, ref: any) => {\n  const { color, size, style, testID, ...resolvedProps } = usePropsResolution(\n    'Spinner',\n    props\n  );\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <ActivityIndicator\n      testID={testID}\n      accessible\n      accessibilityLabel=\"loading\"\n      color={resolvedColor}\n      ref={ref}\n      size={size}\n      style={[resolvedStyle, style]}\n    />\n  );\n};\n\nexport default memo(forwardRef(Spinner));\nexport type { ISpinnerProps };\n"]},"metadata":{},"sourceType":"module"}