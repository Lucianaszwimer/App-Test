{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"inputProps\", \"combinedProps\", \"children\", \"wrapperRef\", \"isHovered\", \"isFocusVisible\"],\n    _excluded2 = [\"_interactionBox\", \"_icon\", \"_stack\", \"_text\"],\n    _excluded3 = [\"icon\", \"children\", \"wrapperRef\", \"isHovered\", \"isFocusVisible\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../Box\";\nimport { Stack } from \"../Stack\";\nimport { Center } from \"../../composites/Center\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { wrapStringChild } from \"../../../utils/wrapStringChild\";\nimport { mergeRefs } from \"./../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from \"./RadioGroup\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from \"../Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { combineContextAndProps, isEmptyObj } from \"../../../utils\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nvar RadioComponent = memo(forwardRef(function (_ref2, ref) {\n  var icon = _ref2.icon,\n      inputProps = _ref2.inputProps,\n      combinedProps = _ref2.combinedProps,\n      children = _ref2.children,\n      wrapperRef = _ref2.wrapperRef,\n      isHoveredProp = _ref2.isHovered,\n      isFocusVisibleProp = _ref2.isFocusVisible,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var isInvalid = combinedProps.isInvalid,\n      isReadOnly = combinedProps.isReadOnly,\n      isIndeterminate = combinedProps.isIndeterminate;\n  var isDisabled = inputProps.disabled,\n      isChecked = inputProps.checked;\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var mergedRefs = mergeRefs([_ref, wrapperRef]);\n\n  var _useFocusRing = useFocusRing(),\n      focusProps = _useFocusRing.focusProps,\n      isFocusVisible = _useFocusRing.isFocusVisible;\n\n  var _usePropsResolution = usePropsResolution('Radio', combinedProps, {\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: isDisabled,\n    isIndeterminate: isIndeterminate,\n    isChecked: isChecked,\n    isHovered: isHoveredProp || isHovered\n  }),\n      _interactionBox = _usePropsResolution._interactionBox,\n      _icon = _usePropsResolution._icon,\n      _stack = _usePropsResolution._stack,\n      _text = _usePropsResolution._text,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var sizedIcon = function sizedIcon() {\n    return React.cloneElement(icon, _objectSpread({}, _icon));\n  };\n\n  var component = React.createElement(Stack, _stack, React.createElement(Center, null, React.createElement(Box, _interactionBox), React.createElement(Center, resolvedProps, icon && sizedIcon && isChecked ? sizedIcon() : React.createElement(CircleIcon, _extends({}, _icon, {\n    opacity: isChecked ? 1 : 0\n  })))), wrapStringChild(children, _text));\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, {\n    accessibilityRole: \"label\",\n    ref: mergedRefs\n  }, React.createElement(VisuallyHidden, null, React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: ref\n  }))), component);\n}));\n\nvar Radio = function Radio(_ref3, ref) {\n  var icon = _ref3.icon,\n      children = _ref3.children,\n      wrapperRef = _ref3.wrapperRef,\n      isHoveredProp = _ref3.isHovered,\n      isFocusVisibleProp = _ref3.isFocusVisible,\n      props = _objectWithoutProperties(_ref3, _excluded3);\n\n  var _contextState$state;\n\n  var formControlContext = useFormControlContext();\n  var contextState = React.useContext(RadioContext);\n  var combinedProps = combineContextAndProps(_objectSpread(_objectSpread({}, formControlContext), contextState), props);\n  var inputRef = React.useRef(null);\n  var radioState = useRadio(_objectSpread(_objectSpread({}, combinedProps), {}, {\n    'aria-label': props.accessibilityLabel,\n    children: children\n  }), (_contextState$state = contextState.state) !== null && _contextState$state !== void 0 ? _contextState$state : {}, inputRef);\n  var inputProps = React.useMemo(function () {\n    return radioState.inputProps;\n  }, [radioState.inputProps.checked, radioState.inputProps.disabled]);\n\n  var _React$useState = React.useState(_objectSpread({}, combinedProps)),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      contextCombinedProps = _React$useState2[0];\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return React.createElement(React.Fragment, null);\n  }\n\n  return React.createElement(RadioComponent, {\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    children: children,\n    ref: ref,\n    icon: icon,\n    wrapperRef: wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\n\nexport default memo(forwardRef(Radio));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","Box","Stack","Center","usePropsResolution","wrapStringChild","mergeRefs","useHover","useRadio","VisuallyHidden","RadioContext","useFocusRing","CircleIcon","useHasResponsiveProps","combineContextAndProps","isEmptyObj","useFormControlContext","RadioComponent","ref","icon","inputProps","combinedProps","children","wrapperRef","isHoveredProp","isHovered","isFocusVisibleProp","isFocusVisible","props","isInvalid","isReadOnly","isIndeterminate","isDisabled","disabled","isChecked","checked","_ref","useRef","mergedRefs","focusProps","_interactionBox","_icon","_stack","_text","resolvedProps","sizedIcon","cloneElement","component","opacity","accessibilityRole","Radio","formControlContext","contextState","useContext","inputRef","radioState","accessibilityLabel","state","useMemo","useState","contextCombinedProps","console","error"],"sources":["Radio.web.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../Box';\nimport { Stack } from '../Stack';\nimport { Center } from '../../composites/Center';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\nimport type { IRadioProps } from './types';\nimport { mergeRefs } from './../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useRadio } from '@react-native-aria/radio';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { RadioContext } from './RadioGroup';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { CircleIcon } from '../Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { combineContextAndProps, isEmptyObj } from '../../../utils';\nimport { useFormControlContext } from '../../composites/FormControl';\n\nconst RadioComponent = memo(\n  forwardRef(\n    (\n      {\n        icon,\n        inputProps,\n        combinedProps,\n        children,\n        wrapperRef,\n        isHovered: isHoveredProp,\n        isFocusVisible: isFocusVisibleProp,\n        ...props\n      }: any,\n      ref: any\n    ) => {\n      const { isInvalid, isReadOnly, isIndeterminate } = combinedProps;\n      const { disabled: isDisabled, checked: isChecked } = inputProps;\n      const _ref = React.useRef(null);\n      const { isHovered } = useHover({}, _ref);\n      const mergedRefs = mergeRefs([_ref, wrapperRef]);\n      const { focusProps, isFocusVisible } = useFocusRing();\n\n      const {\n        _interactionBox,\n        _icon,\n        _stack,\n        _text,\n        ...resolvedProps\n      } = usePropsResolution('Radio', combinedProps, {\n        isInvalid,\n        isReadOnly,\n        isFocusVisible: isFocusVisibleProp || isFocusVisible,\n        isDisabled,\n        isIndeterminate,\n        isChecked,\n        isHovered: isHoveredProp || isHovered,\n      });\n\n      // only calling below function when icon exist.\n      const sizedIcon = () =>\n        //@ts-ignore\n        React.cloneElement(icon, {\n          ..._icon,\n        });\n\n      const component = (\n        <Stack {..._stack}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Radio */}\n            <Center {...resolvedProps}>\n              {icon && sizedIcon && isChecked ? (\n                sizedIcon()\n              ) : (\n                <CircleIcon {..._icon} opacity={isChecked ? 1 : 0} />\n              )}\n            </Center>\n          </Center>\n          {wrapStringChild(children, _text)}\n        </Stack>\n      );\n      //TODO: refactor for responsive prop\n      if (useHasResponsiveProps(props)) {\n        return null;\n      }\n\n      return (\n        <Box\n          // @ts-ignore - RN web supports accessibilityRole=\"label\"\n          accessibilityRole=\"label\"\n          ref={mergedRefs}\n        >\n          <VisuallyHidden>\n            <input {...inputProps} {...focusProps} ref={ref} />\n          </VisuallyHidden>\n          {component}\n        </Box>\n      );\n    }\n  )\n);\n\nconst Radio = (\n  {\n    icon,\n    children,\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: IRadioProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const contextState = React.useContext(RadioContext);\n\n  const combinedProps = combineContextAndProps(\n    { ...formControlContext, ...contextState },\n    props\n  );\n\n  const inputRef = React.useRef(null);\n  const radioState = useRadio(\n    { ...combinedProps, 'aria-label': props.accessibilityLabel, children },\n    contextState.state ?? {},\n    inputRef\n  );\n\n  //@ts-ignore\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => radioState.inputProps, [\n    radioState.inputProps.checked,\n    radioState.inputProps.disabled,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...combinedProps,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (isEmptyObj(contextState)) {\n    console.error('Error: Radio must be wrapped inside a Radio.Group');\n    return <></>;\n  }\n\n  return (\n    <RadioComponent\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      children={children}\n      ref={ref}\n      icon={icon}\n      wrapperRef={wrapperRef}\n      isHovered={isHoveredProp}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nexport default memo(forwardRef(Radio));\n"]},"metadata":{},"sourceType":"module"}