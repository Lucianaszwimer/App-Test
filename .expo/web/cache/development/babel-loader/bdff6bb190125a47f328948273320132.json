{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"isTruncated\", \"noOfLines\", \"bold\", \"italic\", \"sub\", \"highlight\", \"underline\", \"strikeThrough\", \"fontFamily\", \"fontWeight\", \"fontStyle\", \"_hover\", \"fontSize\", \"numberOfLines\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils/mergeRefs\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { useResolvedFontFamily } from \"../../../hooks/useResolvedFontFamily\";\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar StyledText = makeStyledComponent(NativeText);\nvar TextAncestorContext = React.createContext(false);\n\nvar Text = function Text(_ref2, ref) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var hasTextAncestor = React.useContext(TextAncestorContext);\n\n  var _usePropsResolution = usePropsResolution('Text', props, {}, {\n    resolveResponsively: ['noOfLines', 'numberOfLines'],\n    componentTheme: hasTextAncestor ? {} : undefined\n  }),\n      isTruncated = _usePropsResolution.isTruncated,\n      noOfLines = _usePropsResolution.noOfLines,\n      bold = _usePropsResolution.bold,\n      italic = _usePropsResolution.italic,\n      sub = _usePropsResolution.sub,\n      highlight = _usePropsResolution.highlight,\n      underline = _usePropsResolution.underline,\n      strikeThrough = _usePropsResolution.strikeThrough,\n      propFontFamily = _usePropsResolution.fontFamily,\n      propFontWeight = _usePropsResolution.fontWeight,\n      propFontStyle = _usePropsResolution.fontStyle,\n      _hover = _usePropsResolution._hover,\n      fontSize = _usePropsResolution.fontSize,\n      numberOfLines = _usePropsResolution.numberOfLines,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _ref = useRef(null);\n\n  var _useHover = useHover({}, _hover ? _ref : null),\n      isHovered = _useHover.isHovered;\n\n  var fontFamily = propFontFamily;\n  var fontStyle = italic ? 'italic' : propFontStyle;\n  var fontWeight = bold ? 'bold' : propFontWeight;\n  var resolvedFontFamily = useResolvedFontFamily({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : hasTextAncestor ? undefined : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : hasTextAncestor ? undefined : 'normal'\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  var propsToSpread = _objectSpread(_objectSpread(_objectSpread({}, resolvedProps), {}, {\n    numberOfLines: numberOfLines || noOfLines ? numberOfLines || noOfLines : isTruncated ? 1 : undefined\n  }, resolvedFontFamily), {}, {\n    bg: highlight ? 'warning.300' : resolvedProps.bg,\n    textDecorationLine: underline && strikeThrough ? 'underline line-through' : underline ? 'underline' : strikeThrough ? 'line-through' : resolvedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref])\n  }, isHovered && _hover);\n\n  return hasTextAncestor ? React.createElement(StyledText, propsToSpread, children) : React.createElement(TextAncestorContext.Provider, {\n    value: true\n  }, React.createElement(StyledText, propsToSpread, children));\n};\n\nexport default memo(forwardRef(Text));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","useRef","usePropsResolution","useHover","mergeRefs","makeStyledComponent","useResolvedFontFamily","useHasResponsiveProps","StyledText","NativeText","TextAncestorContext","createContext","Text","ref","children","props","hasTextAncestor","useContext","resolveResponsively","componentTheme","undefined","isTruncated","noOfLines","bold","italic","sub","highlight","underline","strikeThrough","propFontFamily","fontFamily","propFontWeight","fontWeight","propFontStyle","fontStyle","_hover","fontSize","numberOfLines","resolvedProps","_ref","isHovered","resolvedFontFamily","propsToSpread","bg","textDecorationLine","Provider","value"],"sources":["index.tsx"],"sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ITextProps } from './types';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { Text as NativeText } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledText = makeStyledComponent(NativeText);\n// To have a RN compatible behaviour, we'll inherit parent text styles as base style\nconst TextAncestorContext = React.createContext(false);\n\nconst Text = ({ children, ...props }: ITextProps, ref: any) => {\n  const hasTextAncestor = React.useContext(TextAncestorContext);\n\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize,\n    numberOfLines,\n    ...resolvedProps\n  } = usePropsResolution(\n    'Text',\n    props,\n    {},\n    {\n      resolveResponsively: ['noOfLines', 'numberOfLines'],\n      // We override the component base theme if text has an ancestor.\n      componentTheme: hasTextAncestor ? {} : undefined,\n    }\n  );\n\n  const _ref = useRef(null);\n  // TODO: might have to add this condition\n  const { isHovered } = useHover({}, _hover ? _ref : null);\n  // const { isHovered } = useHover({}, _ref);\n  let fontFamily = propFontFamily;\n  const fontStyle = italic ? 'italic' : propFontStyle;\n  const fontWeight = bold ? 'bold' : propFontWeight;\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? (hasTextAncestor ? undefined : 400),\n    fontStyle: fontStyle ?? (hasTextAncestor ? undefined : 'normal'),\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const propsToSpread = {\n    ...resolvedProps,\n    numberOfLines:\n      numberOfLines || noOfLines\n        ? numberOfLines || noOfLines\n        : isTruncated\n        ? 1\n        : undefined,\n    ...resolvedFontFamily,\n    bg: highlight ? 'warning.300' : resolvedProps.bg,\n    textDecorationLine:\n      underline && strikeThrough\n        ? 'underline line-through'\n        : underline\n        ? 'underline'\n        : strikeThrough\n        ? 'line-through'\n        : resolvedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref]),\n    ...(isHovered && _hover),\n  };\n\n  return hasTextAncestor ? (\n    <StyledText {...propsToSpread}>{children}</StyledText>\n  ) : (\n    <TextAncestorContext.Provider value={true}>\n      <StyledText {...propsToSpread}>{children}</StyledText>\n    </TextAncestorContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Text));\nexport type { ITextProps };\n"]},"metadata":{},"sourceType":"module"}