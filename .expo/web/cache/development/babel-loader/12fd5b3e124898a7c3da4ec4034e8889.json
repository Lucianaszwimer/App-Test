{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"style\", \"isIncrement\", \"disablitityCheck\", \"_active\", \"_disabled\", \"isDisabled\", \"accessibilityLabel\", \"pressHandler\", \"iconColor\"],\n    _excluded3 = [\"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { VStack, Box } from \"../../primitives\";\nimport { useThemeProps } from \"../../../hooks\";\nimport { NumberInputContext } from \"./Context\";\nimport { ChevronUpIcon, ChevronDownIcon } from \"../../primitives/Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nexport var NBStepper = React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useThemeProps = useThemeProps('NumberInputStepper', props),\n      style = _useThemeProps.style,\n      isIncrement = _useThemeProps.isIncrement,\n      disablitityCheck = _useThemeProps.disablitityCheck,\n      _active = _useThemeProps._active,\n      _disabled = _useThemeProps._disabled,\n      isDisabled = _useThemeProps.isDisabled,\n      accessibilityLabel = _useThemeProps.accessibilityLabel,\n      pressHandler = _useThemeProps.pressHandler,\n      iconColor = _useThemeProps.iconColor,\n      newProps = _objectWithoutProperties(_useThemeProps, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(TouchableOpacity, {\n    activeOpacity: 0.2,\n    disabled: disablitityCheck || isDisabled,\n    onPress: pressHandler,\n    accessible: true,\n    accessibilityLabel: accessibilityLabel,\n    ref: ref\n  }, React.createElement(Box, _extends({}, newProps, _active, disablitityCheck || isDisabled ? _disabled : {}, {\n    borderColor: \"transparent\",\n    style: style,\n    opacity: disablitityCheck || isDisabled ? 0.4 : 1\n  }, Platform.OS === 'web' ? {\n    disabled: disablitityCheck || isDisabled,\n    cursor: disablitityCheck || isDisabled ? 'not-allowed' : 'auto'\n  } : {}), children || isIncrement ? React.createElement(ChevronUpIcon, {\n    color: iconColor\n  }) : React.createElement(ChevronDownIcon, {\n    color: iconColor\n  })));\n});\n\nvar NumberInputStepper = function NumberInputStepper(_ref2, ref) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, _excluded3);\n\n  var _React$useContext = React.useContext(NumberInputContext),\n      numberInputStepper = _React$useContext.numberInputStepper,\n      setNumberInputStepper = _React$useContext.setNumberInputStepper;\n\n  React.useEffect(function () {\n    !numberInputStepper && setNumberInputStepper(React.createElement(VStack, _extends({}, props, {\n      ref: ref\n    }), children));\n  }, [numberInputStepper, setNumberInputStepper, props, children, ref]);\n  return null;\n};\n\nexport default React.memo(React.forwardRef(NumberInputStepper));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,MAAT,EAAiBC,GAAjB;AACA,SAASC,aAAT;AAEA,SAASC,kBAAT;AACA,SAASC,aAAT,EAAwBC,eAAxB;AACA,SAASC,qBAAT;AAEA,OAAO,IAAMC,SAAS,GAAGR,KAAK,CAACS,UAANT,CACvB,gBAA8BU,GAA9B,EAA4C;EAAA,IAAzCC,QAAyC,QAAzCA,QAAyC;EAAA,IAA5BC,KAA4B;;EAC1C,qBAWIT,aAAa,CAAC,oBAAD,EAAuBS,KAAvB,CAXjB;EAAA,IACEC,KADF,kBACEA,KADF;EAAA,IAEEC,WAFF,kBAEEA,WAFF;EAAA,IAGEC,gBAHF,kBAGEA,gBAHF;EAAA,IAIEC,OAJF,kBAIEA,OAJF;EAAA,IAKEC,SALF,kBAKEA,SALF;EAAA,IAMEC,UANF,kBAMEA,UANF;EAAA,IAOEC,kBAPF,kBAOEA,kBAPF;EAAA,IAQEC,YARF,kBAQEA,YARF;EAAA,IASEC,SATF,kBASEA,SATF;EAAA,IAUKC,QAVL;;EAaA,IAAIf,qBAAqB,CAACK,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,OACEZ,oBAACuB,gBAAD;IACEC,aAAa,EAAE,GADjB;IAEEC,QAAQ,EAAEV,gBAAgB,IAAIG,UAFhC;IAGEQ,OAAO,EAAEN,YAHX;IAIEO,UAAU,MAJZ;IAKER,kBAAkB,EAAEA,kBALtB;IAMET,GAAG,EAAEA;EANP,GAQEV,oBAACE,GAAD,eACMoB,QADN,EAEMN,OAFN,EAGOD,gBAAgB,IAAIG,UAApBH,GAAiCE,SAAjCF,GAA6C,EAHpD;IAIEa,WAAW,EAAC,aAJd;IAKEf,KAAK,EAAEA,KALT;IAMEgB,OAAO,EAAEd,gBAAgB,IAAIG,UAApBH,GAAiC,GAAjCA,GAAuC;EANlD,GAOOe,QAAQ,CAACC,EAATD,KAAgB,KAAhBA,GACD;IACEL,QAAQ,EAAEV,gBAAgB,IAAIG,UADhC;IAEEc,MAAM,EAAEjB,gBAAgB,IAAIG,UAApBH,GAAiC,aAAjCA,GAAiD;EAF3D,CADCe,GAKD,EAZN,GAcGnB,QAAQ,IAAIG,WAAZH,GACCX,oBAACK,aAAD;IAAe4B,KAAK,EAAEZ;EAAtB,EADDV,GAGCX,oBAACM,eAAD;IAAiB2B,KAAK,EAAEZ;EAAxB,EAjBJ,CARF,CADF;AAlBqB,EAAlB;;AAoDP,IAAMa,kBAAkB,GAAG,SAArBA,kBAAqB,QAEzBxB,GAFyB,EAGtB;EAAA,IAFDC,QAEC,SAFDA,QAEC;EAAA,IAFYC,KAEZ;;EACH,wBAGyBZ,KAAK,CAACmC,UAANnC,CAAiBI,kBAAjBJ,CAHzB;EAAA,IACEoC,kBADF,qBACEA,kBADF;EAAA,IAEEC,qBAFF,qBAEEA,qBAFF;;EAKArC,KAAK,CAACsC,SAANtC,CAAgB,YAAM;IACpB,CAACoC,kBAAD,IACEC,qBAAqB,CACnBrC,oBAACC,MAAD,eAAYW,KAAZ;MAAmBF,GAAG,EAAEA;IAAxB,IACGC,QADH,CADmB,CADvB;EADF,GAOG,CAACyB,kBAAD,EAAqBC,qBAArB,EAA4CzB,KAA5C,EAAmDD,QAAnD,EAA6DD,GAA7D,CAPHV;EAQA,OAAO,IAAP;AAjBF;;AAoBA,eAAeA,KAAK,CAACuC,IAANvC,CAAWA,KAAK,CAACS,UAANT,CAAiBkC,kBAAjBlC,CAAXA,CAAf","names":["React","VStack","Box","useThemeProps","NumberInputContext","ChevronUpIcon","ChevronDownIcon","useHasResponsiveProps","NBStepper","forwardRef","ref","children","props","style","isIncrement","disablitityCheck","_active","_disabled","isDisabled","accessibilityLabel","pressHandler","iconColor","newProps","TouchableOpacity","activeOpacity","disabled","onPress","accessible","borderColor","opacity","Platform","OS","cursor","color","NumberInputStepper","useContext","numberInputStepper","setNumberInputStepper","useEffect","memo"],"sources":["NumberInputStepper.tsx"],"sourcesContent":["import React from 'react';\nimport { TouchableOpacity, Platform } from 'react-native';\nimport { VStack, Box } from '../../primitives';\nimport { useThemeProps } from '../../../hooks';\nimport type { INumberInputSteppersProps, INumberInputContext } from './types';\nimport { NumberInputContext } from './Context';\nimport { ChevronUpIcon, ChevronDownIcon } from '../../primitives/Icon/Icons';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nexport const NBStepper = React.forwardRef(\n  ({ children, ...props }: any, ref?: any) => {\n    const {\n      style,\n      isIncrement,\n      disablitityCheck,\n      _active,\n      _disabled,\n      isDisabled,\n      accessibilityLabel,\n      pressHandler,\n      iconColor,\n      ...newProps\n    } = useThemeProps('NumberInputStepper', props);\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(props)) {\n      return null;\n    }\n    return (\n      <TouchableOpacity\n        activeOpacity={0.2}\n        disabled={disablitityCheck || isDisabled}\n        onPress={pressHandler}\n        accessible\n        accessibilityLabel={accessibilityLabel}\n        ref={ref}\n      >\n        <Box\n          {...newProps}\n          {..._active}\n          {...(disablitityCheck || isDisabled ? _disabled : {})}\n          borderColor=\"transparent\"\n          style={style}\n          opacity={disablitityCheck || isDisabled ? 0.4 : 1}\n          {...(Platform.OS === 'web'\n            ? {\n                disabled: disablitityCheck || isDisabled,\n                cursor: disablitityCheck || isDisabled ? 'not-allowed' : 'auto',\n              }\n            : {})}\n        >\n          {children || isIncrement ? (\n            <ChevronUpIcon color={iconColor} />\n          ) : (\n            <ChevronDownIcon color={iconColor} />\n          )}\n        </Box>\n      </TouchableOpacity>\n    );\n  }\n);\n\nconst NumberInputStepper = (\n  { children, ...props }: INumberInputSteppersProps,\n  ref?: any\n) => {\n  const {\n    numberInputStepper,\n    setNumberInputStepper,\n  }: INumberInputContext = React.useContext(NumberInputContext);\n\n  React.useEffect(() => {\n    !numberInputStepper &&\n      setNumberInputStepper(\n        <VStack {...props} ref={ref}>\n          {children}\n        </VStack>\n      );\n  }, [numberInputStepper, setNumberInputStepper, props, children, ref]);\n  return null;\n};\n\nexport default React.memo(React.forwardRef(NumberInputStepper));\n"]},"metadata":{},"sourceType":"module"}