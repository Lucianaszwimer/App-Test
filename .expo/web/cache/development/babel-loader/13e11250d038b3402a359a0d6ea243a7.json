{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"_current\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport Text from \"../../primitives/Text\";\nimport { BreadcrumbItemContext } from \"./Context\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps/usePropsResolution\";\n\nvar BreadcrumbText = function BreadcrumbText(props, ref) {\n  var _React$useContext = React.useContext(BreadcrumbItemContext),\n      isCurrent = _React$useContext.isCurrent;\n\n  var _usePropsResolution = usePropsResolution('BreadcrumbText', props),\n      children = _usePropsResolution.children,\n      _current = _usePropsResolution._current,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  return React.createElement(Text, _extends({\n    ref: ref\n  }, isCurrent && _current, resolvedProps), children);\n};\n\nexport default memo(forwardRef(BreadcrumbText));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,IAA5B,QAAwC,OAAxC;AACA,OAAOC,IAAP;AAEA,SAASC,qBAAT;AACA,SAASC,kBAAT;;AAGA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAA8BC,GAA9B,EAA4C;EACjE,wBAA8CR,KAAK,CAACS,UAANT,CAC5CI,qBAD4CJ,CAA9C;EAAA,IAAQU,SAAR,qBAAQA,SAAR;;EAGA,0BAA+CL,kBAAkB,CAC/D,gBAD+D,EAE/DE,KAF+D,CAAjE;EAAA,IAAMI,QAAN,uBAAMA,QAAN;EAAA,IAAgBC,QAAhB,uBAAgBA,QAAhB;EAAA,IAA6BC,aAA7B;;EAIA,OACEb,oBAACG,IAAD;IAAMK,GAAG,EAAEA;EAAX,GAAqBE,SAAS,IAAIE,QAAlC,EAAiDC,aAAjD,GACGF,QADH,CADF;AARF;;AAeA,eAAeT,IAAI,CAACD,UAAU,CAACK,cAAD,CAAX,CAAnB","names":["React","forwardRef","memo","Text","BreadcrumbItemContext","usePropsResolution","BreadcrumbText","props","ref","useContext","isCurrent","children","_current","resolvedProps"],"sources":["BreadcrumbText.tsx"],"sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport Text from '../../primitives/Text';\nimport type { IBreadcrumbItemContext, IBreadcrumbTextProps } from './types';\nimport { BreadcrumbItemContext } from './Context';\nimport { usePropsResolution } from '../../../hooks/useThemeProps/usePropsResolution';\n\n// Add breadcrumbText as child of breadcrumbItem for implementaion of isCurrent prop\nconst BreadcrumbText = (props: IBreadcrumbTextProps, ref?: any) => {\n  const { isCurrent }: IBreadcrumbItemContext = React.useContext(\n    BreadcrumbItemContext\n  );\n  let { children, _current, ...resolvedProps } = usePropsResolution(\n    'BreadcrumbText',\n    props\n  );\n  return (\n    <Text ref={ref} {...(isCurrent && _current)} {...resolvedProps}>\n      {children}\n    </Text>\n  );\n};\n\nexport default memo(forwardRef(BreadcrumbText));\n"]},"metadata":{},"sourceType":"module"}