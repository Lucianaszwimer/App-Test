{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"wrapperRef\", \"isHovered\", \"isFocusVisible\"],\n    _excluded2 = [\"isInvalid\", \"isReadOnly\", \"isIndeterminate\"],\n    _excluded3 = [\"icon\", \"_interactionBox\", \"_icon\", \"_stack\", \"_text\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from \"../../../utils\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { Center } from \"../../composites/Center\";\nimport { useFormControlContext } from \"../../composites/FormControl\";\nimport Box from \"../Box\";\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from \"./CheckboxGroup\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { combineContextAndProps } from \"../../../utils\";\nimport SizedIcon from \"./SizedIcon\";\nimport { Stack } from \"../Stack\";\nimport { wrapStringChild } from \"../../../utils/wrapStringChild\";\n\nvar Checkbox = function Checkbox(_ref2, ref) {\n  var wrapperRef = _ref2.wrapperRef,\n      isHoveredProp = _ref2.isHovered,\n      isFocusVisibleProp = _ref2.isFocusVisible,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var formControlContext = useFormControlContext();\n\n  var _combineContextAndPro = combineContextAndProps(formControlContext, props),\n      isInvalid = _combineContextAndPro.isInvalid,\n      isReadOnly = _combineContextAndPro.isReadOnly,\n      isIndeterminate = _combineContextAndPro.isIndeterminate,\n      combinedProps = _objectWithoutProperties(_combineContextAndPro, _excluded2);\n\n  var checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  var state = useToggleState(_objectSpread(_objectSpread({}, props), {}, {\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked\n  }));\n\n  var _ref = React.useRef();\n\n  var mergedRef = mergeRefs([ref, _ref]);\n\n  var _ref3 = checkboxGroupContext ? useCheckboxGroupItem(_objectSpread(_objectSpread({}, combinedProps), {}, {\n    'aria-label': combinedProps.accessibilityLabel,\n    'value': combinedProps.value\n  }), checkboxGroupContext.state, mergedRef) : useCheckbox(_objectSpread(_objectSpread({}, combinedProps), {}, {\n    'aria-label': combinedProps.accessibilityLabel\n  }), state, mergedRef),\n      groupItemInputProps = _ref3.inputProps;\n\n  var inputProps = React.useMemo(function () {\n    return groupItemInputProps;\n  }, [groupItemInputProps.checked, groupItemInputProps.disabled, groupItemInputProps]);\n\n  var _React$useState = React.useState(_objectSpread(_objectSpread({}, checkboxGroupContext), combinedProps)),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      contextCombinedProps = _React$useState2[0];\n\n  return React.createElement(CheckboxComponent, {\n    wrapperRef: wrapperRef,\n    mergedRef: mergedRef,\n    inputProps: inputProps,\n    combinedProps: contextCombinedProps,\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly,\n    isHovered: isHoveredProp,\n    isIndeterminate: isIndeterminate,\n    isFocusVisible: isFocusVisibleProp\n  });\n};\n\nvar CheckboxComponent = React.memo(function (_ref4) {\n  var wrapperRef = _ref4.wrapperRef,\n      inputProps = _ref4.inputProps,\n      combinedProps = _ref4.combinedProps,\n      isInvalid = _ref4.isInvalid,\n      isReadOnly = _ref4.isReadOnly,\n      isIndeterminate = _ref4.isIndeterminate,\n      mergedRef = _ref4.mergedRef,\n      isHoveredProp = _ref4.isHovered,\n      isFocusVisibleProp = _ref4.isFocusVisible;\n\n  var _ref = React.useRef();\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var isChecked = inputProps.checked,\n      isDisabled = inputProps.disabled;\n\n  var _useFocusRing = useFocusRing(),\n      focusProps = _useFocusRing.focusProps,\n      isFocusVisible = _useFocusRing.isFocusVisible;\n\n  var _usePropsResolution = usePropsResolution('Checkbox', combinedProps, {\n    isInvalid: isInvalid,\n    isReadOnly: isReadOnly,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: isDisabled,\n    isIndeterminate: isIndeterminate,\n    isChecked: isChecked,\n    isHovered: isHovered || isHoveredProp\n  }),\n      icon = _usePropsResolution.icon,\n      _interactionBox = _usePropsResolution._interactionBox,\n      _icon = _usePropsResolution._icon,\n      _stack = _usePropsResolution._stack,\n      _text = _usePropsResolution._text,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded3);\n\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.layout), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), ['_text'])),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      layoutProps = _extractInObject2[0],\n      nonLayoutProps = _extractInObject2[1];\n\n  var component = React.useMemo(function () {\n    return React.createElement(Stack, _extends({}, _stack, layoutProps), React.createElement(Center, null, React.createElement(Box, _interactionBox), React.createElement(Center, nonLayoutProps, React.createElement(SizedIcon, {\n      icon: icon,\n      _icon: _icon,\n      isChecked: isChecked\n    }))), wrapStringChild(resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.children, _text));\n  }, [_icon, _stack, _text, _interactionBox, icon, isChecked, nonLayoutProps, layoutProps, resolvedProps === null || resolvedProps === void 0 ? void 0 : resolvedProps.children]);\n  var mergedWrapperRef = React.useMemo(function () {\n    return mergeRefs([wrapperRef, _ref]);\n  }, [wrapperRef]);\n\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n\n  return React.createElement(Box, {\n    accessibilityRole: \"label\",\n    ref: mergedWrapperRef\n  }, React.createElement(VisuallyHidden, null, React.createElement(\"input\", _extends({}, inputProps, focusProps, {\n    ref: mergedRef\n  }))), component);\n});\nexport default memo(forwardRef(Checkbox));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,SAAT;AACA,SAASC,kBAAT;AACA,SAASC,MAAT;AACA,SAASC,qBAAT;AACA,OAAOC,GAAP;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,oBAAT;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,SAASC,WAAT,EAAsBC,oBAAtB,QAAkD,6BAAlD;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,qBAAT;AACA,SAASC,eAAT,EAA0BC,YAA1B;AACA,SAASC,sBAAT;AACA,OAAOC,SAAP;AACA,SAASC,KAAT;AACA,SAASC,eAAT;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,QAOfC,GAPe,EAQZ;EAAA,IANDC,UAMC,SANDA,UAMC;EAAA,IALUC,aAKV,SALDC,SAKC;EAAA,IAJeC,kBAIf,SAJDC,cAIC;EAAA,IAHEC,KAGF;;EACH,IAAMC,kBAAkB,GAAGxB,qBAAqB,EAAhD;;EAEA,4BAKIY,sBAAsB,CAACY,kBAAD,EAAqBD,KAArB,CAL1B;EAAA,IACEE,SADF,yBACEA,SADF;EAAA,IAEEC,UAFF,yBAEEA,UAFF;EAAA,IAGEC,eAHF,yBAGEA,eAHF;EAAA,IAIKC,aAJL;;EAOA,IAAMC,oBAAoB,GAAGnC,KAAK,CAACoC,UAANpC,CAAiBU,oBAAjBV,CAA7B;EACA,IAAMqC,KAAK,GAAG7B,cAAc,iCACvBqB,KADuB;IAE1BS,eAAe,EAAET,KAAK,CAACU,gBAFG;IAG1BC,UAAU,EAAEX,KAAK,CAACY;EAHQ,GAA5B;;EAMA,IAAMC,IAAI,GAAG1C,KAAK,CAAC2C,MAAN3C,EAAb;;EACA,IAAM4C,SAAS,GAAGzC,SAAS,CAAC,CAACoB,GAAD,EAAMmB,IAAN,CAAD,CAA3B;;EAKA,YAA4CP,oBAAoB,GAE5DtB,oBAAoB,iCAEbqB,aAFa;IAGhB,cAAcA,aAAa,CAACW,kBAHZ;IAIhB,SAASX,aAAa,CAACY;EAJP,IAMlBX,oBAAoB,CAACE,KANH,EAQlBO,SARkB,CAFwC,GAa5DhC,WAAW,iCAEJsB,aAFI;IAGP,cAAcA,aAAa,CAACW;EAHrB,IAKTR,KALS,EAOTO,SAPS,CAbf;EAAA,IAAoBG,mBAApB,SAAQC,UAAR;;EAwBA,IAAMA,UAAU,GAAGhD,KAAK,CAACiD,OAANjD,CAAc;IAAA,OAAM+C,mBAAN;EAAA,CAAd/C,EAAyC,CAC1D+C,mBAAmB,CAACG,OADsC,EAE1DH,mBAAmB,CAACI,QAFsC,EAG1DJ,mBAH0D,CAAzC/C,CAAnB;;EAMA,sBAA+BA,KAAK,CAACoD,QAANpD,iCAC1BmC,oBAD0BnC,GAE1BkC,aAF0BlC,EAA/B;EAAA;EAAA,IAAOqD,oBAAP;;EAKA,OACErD,oBAACsD,iBAAD;IACE9B,UAAU,EAAEA,UADd;IAEEoB,SAAS,EAAEA,SAFb;IAGEI,UAAU,EAAEA,UAHd;IAIEd,aAAa,EAAEmB,oBAJjB;IAKEtB,SAAS,EAAEA,SALb;IAMEC,UAAU,EAAEA,UANd;IAOEN,SAAS,EAAED,aAPb;IAQEQ,eAAe,EAAEA,eARnB;IASEL,cAAc,EAAED;EATlB,EADF;AAlEF;;AAiFA,IAAM2B,iBAAiB,GAAGtD,KAAK,CAACC,IAAND,CACxB,iBAUW;EAAA,IATTwB,UASS,SATTA,UASS;EAAA,IARTwB,UAQS,SARTA,UAQS;EAAA,IAPTd,aAOS,SAPTA,aAOS;EAAA,IANTH,SAMS,SANTA,SAMS;EAAA,IALTC,UAKS,SALTA,UAKS;EAAA,IAJTC,eAIS,SAJTA,eAIS;EAAA,IAHTW,SAGS,SAHTA,SAGS;EAAA,IAFEnB,aAEF,SAFTC,SAES;EAAA,IADOC,kBACP,SADTC,cACS;;EACT,IAAMc,IAAI,GAAG1C,KAAK,CAAC2C,MAAN3C,EAAb;;EACA,gBAAsBW,QAAQ,CAAC,EAAD,EAAK+B,IAAL,CAA9B;EAAA,IAAQhB,SAAR,aAAQA,SAAR;;EAEA,IAAiBe,SAAjB,GAAqDO,UAArD,CAAQE,OAAR;EAAA,IAAsCK,UAAtC,GAAqDP,UAArD,CAA4BG,QAA5B;;EAEA,oBAAuCrC,YAAY,EAAnD;EAAA,IAAQ0C,UAAR,iBAAQA,UAAR;EAAA,IAAoB5B,cAApB,iBAAoBA,cAApB;;EAEA,0BAOIxB,kBAAkB,CAAC,UAAD,EAAa8B,aAAb,EAA4B;IAChDH,SADgD,EAChDA,SADgD;IAEhDC,UAFgD,EAEhDA,UAFgD;IAGhDJ,cAAc,EAAED,kBAAkB,IAAIC,cAHU;IAIhD2B,UAJgD,EAIhDA,UAJgD;IAKhDtB,eALgD,EAKhDA,eALgD;IAMhDQ,SANgD,EAMhDA,SANgD;IAOhDf,SAAS,EAAEA,SAAS,IAAID;EAPwB,CAA5B,CAPtB;EAAA,IACEgC,IADF,uBACEA,IADF;EAAA,IAEEC,eAFF,uBAEEA,eAFF;EAAA,IAGEC,KAHF,uBAGEA,KAHF;EAAA,IAIEC,MAJF,uBAIEA,MAJF;EAAA,IAKEC,KALF,uBAKEA,KALF;EAAA,IAMKC,aANL;;EAiBA,uBAAsC9C,eAAe,CAAC8C,aAAD,+BAChD7C,YAAY,CAAC8C,MADmC,sBAEhD9C,YAAY,CAAC+C,MAFmC,sBAGhD/C,YAAY,CAACgD,OAHmC,sBAIhDhD,YAAY,CAACiD,QAJmC,IAKnD,OALmD,GAArD;EAAA;EAAA,IAAOC,WAAP;EAAA,IAAoBC,cAApB;;EAOA,IAAMC,SAAS,GAAGrE,KAAK,CAACiD,OAANjD,CAAc,YAAM;IACpC,OACEA,oBAACoB,KAAD,eAAWwC,MAAX,EAAuBO,WAAvB,GACEnE,oBAACK,MAAD,QAEEL,oBAACO,GAAD,EAASmD,eAAT,CAFF,EAIE1D,oBAACK,MAAD,EAAY+D,cAAZ,EAEEpE,oBAACmB,SAAD;MAAWsC,IAAI,EAAEA,IAAjB;MAAuBE,KAAK,EAAEA,KAA9B;MAAqClB,SAAS,EAAEA;IAAhD,EAFF,CAJF,CADF,EAYGpB,eAAe,CAACyC,aAAD,SAACA,iBAAD,WAACA,GAAD,MAACA,gBAAa,CAAEQ,QAAhB,EAA0BT,KAA1B,CAZlB,CADF;EADgB,GAiBf,CACDF,KADC,EAEDC,MAFC,EAGDC,KAHC,EAIDH,eAJC,EAKDD,IALC,EAMDhB,SANC,EAOD2B,cAPC,EAQDD,WARC,EASDL,aATC,SASDA,iBATC,WASDA,GATC,MASDA,gBAAa,CAAEQ,QATd,CAjBetE,CAAlB;EA6BA,IAAMuE,gBAAgB,GAAGvE,KAAK,CAACiD,OAANjD,CACvB;IAAA,OAAMG,SAAS,CAAC,CAACqB,UAAD,EAAakB,IAAb,CAAD,CAAf;EAAA,CADuB1C,EAEvB,CAACwB,UAAD,CAFuBxB,CAAzB;;EAMA,IAAIe,qBAAqB,CAAC+C,aAAD,CAAzB,EAA0C;IACxC,OAAO,IAAP;EACD;;EAED,OACE9D,oBAACO,GAAD;IAEEiE,iBAAiB,EAAC,OAFpB;IAGEjD,GAAG,EAAEgD;EAHP,GAKEvE,oBAACS,cAAD,QAEET,0CAAWgD,UAAX,EAA2BQ,UAA3B;IAAuCjC,GAAG,EAAEqB;EAA5C,GAFF,CALF,EAUGyB,SAVH,CADF;AAlFsB,EAA1B;AAmGA,eAAepE,IAAI,CAACC,UAAU,CAACoB,QAAD,CAAX,CAAnB","names":["React","memo","forwardRef","mergeRefs","usePropsResolution","Center","useFormControlContext","Box","useToggleState","VisuallyHidden","CheckboxGroupContext","useHover","useCheckbox","useCheckboxGroupItem","useFocusRing","useHasResponsiveProps","extractInObject","stylingProps","combineContextAndProps","SizedIcon","Stack","wrapStringChild","Checkbox","ref","wrapperRef","isHoveredProp","isHovered","isFocusVisibleProp","isFocusVisible","props","formControlContext","isInvalid","isReadOnly","isIndeterminate","combinedProps","checkboxGroupContext","useContext","state","defaultSelected","defaultIsChecked","isSelected","isChecked","_ref","useRef","mergedRef","accessibilityLabel","value","groupItemInputProps","inputProps","useMemo","checked","disabled","useState","contextCombinedProps","CheckboxComponent","isDisabled","focusProps","icon","_interactionBox","_icon","_stack","_text","resolvedProps","margin","layout","flexbox","position","layoutProps","nonLayoutProps","component","children","mergedWrapperRef","accessibilityRole"],"sources":["Checkbox.web.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { mergeRefs } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Center } from '../../composites/Center';\nimport { useFormControlContext } from '../../composites/FormControl';\nimport Box from '../Box';\nimport type { ICheckboxProps } from './types';\nimport { useToggleState } from '@react-stately/toggle';\nimport { VisuallyHidden } from '@react-aria/visually-hidden';\nimport { CheckboxGroupContext } from './CheckboxGroup';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useCheckbox, useCheckboxGroupItem } from '@react-native-aria/checkbox';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { combineContextAndProps } from '../../../utils';\nimport SizedIcon from './SizedIcon';\nimport { Stack } from '../Stack';\nimport { wrapStringChild } from '../../../utils/wrapStringChild';\n\nconst Checkbox = (\n  {\n    wrapperRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n    ...props\n  }: ICheckboxProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n\n  const {\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    ...combinedProps\n  } = combineContextAndProps(formControlContext, props);\n\n  const checkboxGroupContext = React.useContext(CheckboxGroupContext);\n  const state = useToggleState({\n    ...props,\n    defaultSelected: props.defaultIsChecked,\n    isSelected: props.isChecked,\n  });\n\n  const _ref = React.useRef();\n  const mergedRef = mergeRefs([ref, _ref]);\n\n  // Swap hooks depending on whether this checkbox is inside a CheckboxGroup.\n  // This is a bit unorthodox. Typically, hooks cannot be called in a conditional,\n  // but since the checkbox won't move in and out of a group, it should be safe.\n  const { inputProps: groupItemInputProps } = checkboxGroupContext\n    ? // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckboxGroupItem(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n          'value': combinedProps.value,\n        },\n        checkboxGroupContext.state,\n        //@ts-ignore\n        mergedRef\n      )\n    : // eslint-disable-next-line react-hooks/rules-of-hooks\n      useCheckbox(\n        {\n          ...combinedProps,\n          'aria-label': combinedProps.accessibilityLabel,\n        },\n        state,\n        //@ts-ignore\n        mergedRef\n      );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const inputProps = React.useMemo(() => groupItemInputProps, [\n    groupItemInputProps.checked,\n    groupItemInputProps.disabled,\n    groupItemInputProps,\n  ]);\n\n  const [contextCombinedProps] = React.useState({\n    ...checkboxGroupContext,\n    ...combinedProps,\n  });\n\n  return (\n    <CheckboxComponent\n      wrapperRef={wrapperRef}\n      mergedRef={mergedRef}\n      inputProps={inputProps}\n      combinedProps={contextCombinedProps}\n      isInvalid={isInvalid}\n      isReadOnly={isReadOnly}\n      isHovered={isHoveredProp}\n      isIndeterminate={isIndeterminate}\n      isFocusVisible={isFocusVisibleProp}\n    />\n  );\n};\n\nconst CheckboxComponent = React.memo(\n  ({\n    wrapperRef,\n    inputProps,\n    combinedProps,\n    isInvalid,\n    isReadOnly,\n    isIndeterminate,\n    mergedRef,\n    isHovered: isHoveredProp,\n    isFocusVisible: isFocusVisibleProp,\n  }: any) => {\n    const _ref = React.useRef();\n    const { isHovered } = useHover({}, _ref);\n\n    const { checked: isChecked, disabled: isDisabled } = inputProps;\n\n    const { focusProps, isFocusVisible } = useFocusRing();\n\n    const {\n      icon,\n      _interactionBox,\n      _icon,\n      _stack,\n      _text,\n      ...resolvedProps\n    } = usePropsResolution('Checkbox', combinedProps, {\n      isInvalid,\n      isReadOnly,\n      isFocusVisible: isFocusVisibleProp || isFocusVisible,\n      isDisabled,\n      isIndeterminate,\n      isChecked,\n      isHovered: isHovered || isHoveredProp,\n    });\n\n    const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n      ...stylingProps.margin,\n      ...stylingProps.layout,\n      ...stylingProps.flexbox,\n      ...stylingProps.position,\n      '_text',\n    ]);\n    const component = React.useMemo(() => {\n      return (\n        <Stack {..._stack} {...layoutProps}>\n          <Center>\n            {/* Interaction Box */}\n            <Box {..._interactionBox} />\n            {/* Checkbox */}\n            <Center {...nonLayoutProps}>\n              {/* {iconResolver()} */}\n              <SizedIcon icon={icon} _icon={_icon} isChecked={isChecked} />\n            </Center>\n          </Center>\n          {/* Label */}\n          {/* {resolvedProps?.children} */}\n          {wrapStringChild(resolvedProps?.children, _text)}\n        </Stack>\n      );\n    }, [\n      _icon,\n      _stack,\n      _text,\n      _interactionBox,\n      icon,\n      isChecked,\n      nonLayoutProps,\n      layoutProps,\n      resolvedProps?.children,\n    ]);\n\n    const mergedWrapperRef = React.useMemo(\n      () => mergeRefs([wrapperRef, _ref]),\n      [wrapperRef]\n    );\n\n    //TODO: refactor for responsive prop\n    if (useHasResponsiveProps(resolvedProps)) {\n      return null;\n    }\n\n    return (\n      <Box\n        // @ts-ignore - RN web supports accessibilityRole=\"label\"\n        accessibilityRole=\"label\"\n        ref={mergedWrapperRef}\n      >\n        <VisuallyHidden>\n          {/* <input {...props.inputProps} {...props.focusProps} ref={props.mergedRef} /> */}\n          <input {...inputProps} {...focusProps} ref={mergedRef} />\n        </VisuallyHidden>\n\n        {component}\n      </Box>\n    );\n  }\n);\n\nexport default memo(forwardRef(Checkbox));\n"]},"metadata":{},"sourceType":"module"}