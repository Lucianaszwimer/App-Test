{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"children\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\", \"isDisabled\"],\n    _excluded2 = [\"_icon\", \"onPressIn\", \"onPressOut\", \"onHoverIn\", \"onHoverOut\", \"onFocus\", \"onBlur\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Pressable } from \"../../primitives/Pressable\";\nimport { Icon } from \"../../primitives/Icon\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { composeEventHandlers } from \"../../../utils\";\nimport { useHover, useFocus, useIsPressed } from \"../../primitives/Pressable/Pressable\";\nimport { useFocusRing } from '@react-native-aria/focus';\n\nvar IconButton = function IconButton(_ref, ref) {\n  var icon = _ref.icon,\n      children = _ref.children,\n      isHoveredProp = _ref.isHovered,\n      isPressedProp = _ref.isPressed,\n      isFocusedProp = _ref.isFocused,\n      isFocusVisibleProp = _ref.isFocusVisible,\n      isDisabled = _ref.isDisabled,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useHover = useHover(),\n      hoverProps = _useHover.hoverProps,\n      isHovered = _useHover.isHovered;\n\n  var _useIsPressed = useIsPressed(),\n      pressableProps = _useIsPressed.pressableProps,\n      isPressed = _useIsPressed.isPressed;\n\n  var _useFocus = useFocus(),\n      focusProps = _useFocus.focusProps,\n      isFocused = _useFocus.isFocused;\n\n  var _useFocusRing = useFocusRing(),\n      isFocusVisible = _useFocusRing.isFocusVisible,\n      focusRingProps = _useFocusRing.focusProps;\n\n  var _usePropsResolution = usePropsResolution('IconButton', props, {\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: isDisabled\n  }),\n      _icon = _usePropsResolution._icon,\n      onPressIn = _usePropsResolution.onPressIn,\n      onPressOut = _usePropsResolution.onPressOut,\n      onHoverIn = _usePropsResolution.onHoverIn,\n      onHoverOut = _usePropsResolution.onHoverOut,\n      onFocus = _usePropsResolution.onFocus,\n      onBlur = _usePropsResolution.onBlur,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var clonedIcon;\n\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, _objectSpread(_objectSpread(_objectSpread({}, _icon), icon === null || icon === void 0 ? void 0 : icon.props), props._icon));\n  }\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Pressable, _extends({\n    accessibilityRole: \"button\",\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut),\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn),\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut),\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus),\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur)\n  }, resolvedProps), clonedIcon || React.createElement(Icon, _icon, children));\n};\n\nexport default memo(forwardRef(IconButton));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,SAAT;AACA,SAASC,IAAT;AACA,SAASC,kBAAT;AACA,SAASC,qBAAT;AACA,SAASC,oBAAT;AAEA,SACEC,QADF,EAEEC,QAFF,EAGEC,YAHF;AAKA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAWjBC,GAXiB,EAYd;EAAA,IAVDC,IAUC,QAVDA,IAUC;EAAA,IATDC,QASC,QATDA,QASC;EAAA,IARUC,aAQV,QARDC,SAQC;EAAA,IAPUC,aAOV,QAPDC,SAOC;EAAA,IANUC,aAMV,QANDC,SAMC;EAAA,IALeC,kBAKf,QALDC,cAKC;EAAA,IAJDC,UAIC,QAJDA,UAIC;EAAA,IAHEC,KAGF;;EACH,gBAAkCjB,QAAQ,EAA1C;EAAA,IAAQkB,UAAR,aAAQA,UAAR;EAAA,IAAoBT,SAApB,aAAoBA,SAApB;;EACA,oBAAsCP,YAAY,EAAlD;EAAA,IAAQiB,cAAR,iBAAQA,cAAR;EAAA,IAAwBR,SAAxB,iBAAwBA,SAAxB;;EACA,gBAAkCV,QAAQ,EAA1C;EAAA,IAAQmB,UAAR,aAAQA,UAAR;EAAA,IAAoBP,SAApB,aAAoBA,SAApB;;EACA,oBAA4DV,YAAY,EAAxE;EAAA,IAAQY,cAAR,iBAAQA,cAAR;EAAA,IAAoCM,cAApC,iBAAwBD,UAAxB;;EAEA,0BASIvB,kBAAkB,CAAC,YAAD,EAAeoB,KAAf,EAAsB;IAC1CR,SAAS,EAAED,aAAa,IAAIC,SADc;IAE1CE,SAAS,EAAED,aAAa,IAAIC,SAFc;IAG1CE,SAAS,EAAED,aAAa,IAAIC,SAHc;IAI1CE,cAAc,EAAED,kBAAkB,IAAIC,cAJI;IAK1CC;EAL0C,CAAtB,CATtB;EAAA,IACEM,KADF,uBACEA,KADF;EAAA,IAEEC,SAFF,uBAEEA,SAFF;EAAA,IAGEC,UAHF,uBAGEA,UAHF;EAAA,IAIEC,SAJF,uBAIEA,SAJF;EAAA,IAKEC,UALF,uBAKEA,UALF;EAAA,IAMEC,OANF,uBAMEA,OANF;EAAA,IAOEC,MAPF,uBAOEA,MAPF;EAAA,IAQKC,aARL;;EAiBA,IAAIC,UAAJ;;EACA,IAAIxB,IAAJ,EAAU;IACRwB,UAAU,GAAGtC,KAAK,CAACuC,YAANvC,CAAmBc,IAAnBd,gDACR8B,KADQ9B,GAERc,IAAH,SAAGA,QAAH,WAAGA,GAAH,MAAGA,OAAI,CAAEW,KAFEzB,GAGRyB,KAAK,CAACK,KAHE9B,EAAbsC;EAzBC;;EAiCH,IAAIhC,qBAAqB,CAACmB,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EAED,OACEzB,oBAACG,SAAD;IACEqC,iBAAiB,EAAC,QADpB;IAEE3B,GAAG,EAAEA,GAFP;IAGEkB,SAAS,EAAExB,oBAAoB,CAACwB,SAAD,EAAYJ,cAAc,CAACI,SAA3B,CAHjC;IAIEC,UAAU,EAAEzB,oBAAoB,CAACyB,UAAD,EAAaL,cAAc,CAACK,UAA5B,CAJlC;IAMEC,SAAS,EAAE1B,oBAAoB,CAAC0B,SAAD,EAAYP,UAAU,CAACO,SAAvB,CANjC;IAQEC,UAAU,EAAE3B,oBAAoB,CAAC2B,UAAD,EAAaR,UAAU,CAACQ,UAAxB,CARlC;IAUEC,OAAO,EAAE5B,oBAAoB,CAC3BA,oBAAoB,CAAC4B,OAAD,EAAUP,UAAU,CAACO,OAArB,CADO,EAE3BN,cAAc,CAACM,OAFY,CAV/B;IAeEC,MAAM,EAAE7B,oBAAoB,CAC1BA,oBAAoB,CAAC6B,MAAD,EAASR,UAAU,CAACQ,MAApB,CADM,EAE1BP,cAAc,CAACO,MAFW;EAf9B,GAmBMC,aAnBN,GAqBGC,UAAU,IAAItC,oBAACI,IAAD,EAAU0B,KAAV,EAAkBf,QAAlB,CArBjB,CADF;AAjDF;;AA4EA,eAAed,IAAI,CAACC,UAAU,CAACU,UAAD,CAAX,CAAnB","names":["React","memo","forwardRef","Pressable","Icon","usePropsResolution","useHasResponsiveProps","composeEventHandlers","useHover","useFocus","useIsPressed","useFocusRing","IconButton","ref","icon","children","isHoveredProp","isHovered","isPressedProp","isPressed","isFocusedProp","isFocused","isFocusVisibleProp","isFocusVisible","isDisabled","props","hoverProps","pressableProps","focusProps","focusRingProps","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","resolvedProps","clonedIcon","cloneElement","accessibilityRole"],"sources":["index.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst IconButton = (\n  {\n    icon,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('IconButton', props, {\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled,\n  });\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n      ...icon?.props,\n      ...props._icon,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]},"metadata":{},"sourceType":"module"}