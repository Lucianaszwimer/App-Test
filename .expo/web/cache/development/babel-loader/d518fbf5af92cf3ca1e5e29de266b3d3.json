{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"groupProps\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { clamp, mergeProps, useGlobalListeners } from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from \"./utils\";\nimport { useRef } from 'react';\nimport { setInteractionModality } from '@react-aria/interactions';\nimport { useLabel } from '@react-aria/label';\nimport { mapDomPropsToRN, isRTL } from '@react-native-aria/utils';\nimport { useMove } from \"./useMove\";\n\nfunction useSliderWeb(props, state, trackLayout) {\n  var _labelProps$id;\n\n  var _useLabel = useLabel(props),\n      labelProps = _useLabel.labelProps,\n      fieldProps = _useLabel.fieldProps;\n\n  var isVertical = props.orientation === 'vertical';\n  sliderIds.set(state, (_labelProps$id = labelProps.id) !== null && _labelProps$id !== void 0 ? _labelProps$id : fieldProps.id);\n  var direction = isRTL() ? 'rtl' : undefined;\n\n  var _useGlobalListeners = useGlobalListeners(),\n      addGlobalListener = _useGlobalListeners.addGlobalListener,\n      removeGlobalListener = _useGlobalListeners.removeGlobalListener;\n\n  var realTimeTrackDraggingIndex = useRef(null);\n  var stateRef = useRef(null);\n  stateRef.current = state;\n  var reverseX = direction === 'rtl';\n  var currentPosition = useRef(null);\n\n  var _useMove = useMove({\n    onMoveStart: function onMoveStart() {\n      currentPosition.current = null;\n    },\n    onMove: function onMove(_ref) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      var size = isVertical ? trackLayout.height : trackLayout.width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current = stateRef.current.getThumbPercent(realTimeTrackDraggingIndex.current) * size;\n      }\n\n      var delta = isVertical ? deltaY : deltaX;\n\n      if (isVertical || reverseX) {\n        delta = -delta;\n      }\n\n      currentPosition.current += delta;\n\n      if (realTimeTrackDraggingIndex.current != null) {\n        var percent = clamp(currentPosition.current / size, 0, 1);\n        stateRef.current.setThumbPercent(realTimeTrackDraggingIndex.current, percent);\n      }\n    },\n    onMoveEnd: function onMoveEnd() {\n      if (realTimeTrackDraggingIndex.current != null) {\n        stateRef.current.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n        realTimeTrackDraggingIndex.current = null;\n      }\n    }\n  }),\n      moveProps = _useMove.moveProps;\n\n  var currentPointer = useRef(undefined);\n\n  var onDownTrack = function onDownTrack(e, id, clientX, clientY) {\n    if (!props.isDisabled && state.values.every(function (_, i) {\n      return !state.isThumbDragging(i);\n    })) {\n      var size = isVertical ? trackLayout.height : trackLayout.width;\n      var trackPosition = trackLayout[isVertical ? 'top' : 'left'];\n      var clickPosition = isVertical ? clientY : clientX;\n      var offset = clickPosition - trackPosition;\n      var percent = offset / size;\n\n      if (direction === 'rtl' || isVertical) {\n        percent = 1 - percent;\n      }\n\n      var value = state.getPercentValue(percent);\n      var closestThumb;\n      var split = state.values.findIndex(function (v) {\n        return value - v < 0;\n      });\n\n      if (split === 0) {\n        closestThumb = split;\n      } else if (split === -1) {\n        closestThumb = state.values.length - 1;\n      } else {\n        var lastLeft = state.values[split - 1];\n        var firstRight = state.values[split];\n\n        if (Math.abs(lastLeft - value) < Math.abs(firstRight - value)) {\n          closestThumb = split - 1;\n        } else {\n          closestThumb = split;\n        }\n      }\n\n      if (closestThumb >= 0 && state.isThumbEditable(closestThumb)) {\n        e.preventDefault();\n        realTimeTrackDraggingIndex.current = closestThumb;\n        state.setFocusedThumb(closestThumb);\n        currentPointer.current = id;\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, true);\n        state.setThumbValue(closestThumb, value);\n        addGlobalListener(window, 'mouseup', onUpTrack, false);\n        addGlobalListener(window, 'touchend', onUpTrack, false);\n        addGlobalListener(window, 'pointerup', onUpTrack, false);\n      } else {\n        realTimeTrackDraggingIndex.current = null;\n      }\n    }\n  };\n\n  var onUpTrack = function onUpTrack(e) {\n    var _e$pointerId, _e$changedTouches;\n\n    var id = (_e$pointerId = e.pointerId) !== null && _e$pointerId !== void 0 ? _e$pointerId : (_e$changedTouches = e.changedTouches) === null || _e$changedTouches === void 0 ? void 0 : _e$changedTouches[0].identifier;\n\n    if (id === currentPointer.current) {\n      if (realTimeTrackDraggingIndex.current != null) {\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n        realTimeTrackDraggingIndex.current = null;\n      }\n\n      removeGlobalListener(window, 'mouseup', onUpTrack, false);\n      removeGlobalListener(window, 'touchend', onUpTrack, false);\n      removeGlobalListener(window, 'pointerup', onUpTrack, false);\n    }\n  };\n\n  if (labelProps.htmlFor) {\n    delete labelProps.htmlFor;\n\n    labelProps.onClick = function () {\n      var _document$getElementB;\n\n      (_document$getElementB = document.getElementById(getSliderThumbId(state, 0))) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.focus();\n      setInteractionModality('keyboard');\n    };\n  }\n\n  return {\n    labelProps: labelProps,\n    groupProps: _objectSpread({\n      role: 'group'\n    }, fieldProps),\n    trackProps: mergeProps({\n      onMouseDown: function onMouseDown(e) {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n\n        onDownTrack(e, undefined, e.clientX, e.clientY);\n      },\n      onPointerDown: function onPointerDown(e) {\n        if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) {\n          return;\n        }\n\n        onDownTrack(e, e.pointerId, e.clientX, e.clientY);\n      },\n      onTouchStart: function onTouchStart(e) {\n        onDownTrack(e, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);\n      }\n    }, moveProps),\n    outputProps: {\n      'htmlFor': state.values.map(function (_, index) {\n        return getSliderThumbId(state, index);\n      }).join(' '),\n      'aria-live': 'off'\n    }\n  };\n}\n\nexport var useSlider = function useSlider(props, state, ref) {\n  var _useSliderWeb = useSliderWeb(props, state, ref),\n      webGroupProps = _useSliderWeb.groupProps,\n      rest = _objectWithoutProperties(_useSliderWeb, _excluded);\n\n  var groupProps = mapDomPropsToRN(webGroupProps);\n  var labelProps = mapDomPropsToRN(rest.labelProps);\n  return _objectSpread(_objectSpread({\n    groupProps: groupProps\n  }, rest), {}, {\n    labelProps: labelProps\n  });\n};","map":{"version":3,"mappings":"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","names":["clamp","mergeProps","useGlobalListeners","getSliderThumbId","sliderIds","useRef","setInteractionModality","useLabel","mapDomPropsToRN","isRTL","useMove","useSliderWeb","props","state","trackLayout","labelProps","fieldProps","isVertical","orientation","set","id","direction","undefined","addGlobalListener","removeGlobalListener","realTimeTrackDraggingIndex","stateRef","current","reverseX","currentPosition","onMoveStart","onMove","deltaX","deltaY","size","height","width","getThumbPercent","delta","percent","setThumbPercent","onMoveEnd","setThumbDragging","moveProps","currentPointer","onDownTrack","e","clientX","clientY","isDisabled","values","every","_","i","isThumbDragging","trackPosition","clickPosition","offset","value","getPercentValue","closestThumb","split","findIndex","v","length","lastLeft","firstRight","Math","abs","isThumbEditable","preventDefault","setFocusedThumb","setThumbValue","window","onUpTrack","pointerId","changedTouches","_e$changedTouches","identifier","htmlFor","onClick","getElementById","document","focus","groupProps","role","trackProps","onMouseDown","button","altKey","ctrlKey","metaKey","onPointerDown","pointerType","onTouchStart","outputProps","map","index","join","useSlider","ref","webGroupProps","rest"],"sources":["useSlider.web.ts"],"sourcesContent":["import { AriaSliderProps } from '@react-types/slider';\nimport { clamp, mergeProps, useGlobalListeners } from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from './utils';\nimport React, { useRef } from 'react';\nimport { setInteractionModality } from '@react-aria/interactions';\nimport { SliderState } from '@react-stately/slider';\nimport { useLabel } from '@react-aria/label';\nimport { mapDomPropsToRN, isRTL } from '@react-native-aria/utils';\nimport { useMove } from './useMove';\n\ninterface SliderAria {\n  /** Props for the label element. */\n  labelProps: any;\n\n  /** Props for the root element of the slider component; groups slider inputs. */\n  groupProps: any;\n\n  /** Props for the track element. */\n  trackProps: any;\n\n  /** Props for the output element, displaying the value of the slider thumbs. */\n  outputProps: any;\n}\n\nfunction useSliderWeb(\n  props: AriaSliderProps,\n  state: SliderState,\n  trackLayout: {\n    height: number;\n    width: number;\n    top: number;\n    left: number;\n    x: number;\n    y: number;\n  }\n): SliderAria {\n  let { labelProps, fieldProps } = useLabel(props);\n\n  let isVertical = props.orientation === 'vertical';\n\n  // Attach id of the label to the state so it can be accessed by useSliderThumb.\n  sliderIds.set(state, labelProps.id ?? fieldProps.id);\n\n  const direction = isRTL() ? 'rtl' : undefined;\n\n  let { addGlobalListener, removeGlobalListener } = useGlobalListeners();\n\n  // When the user clicks or drags the track, we want the motion to set and drag the\n  // closest thumb.  Hence we also need to install useMove() on the track element.\n  // Here, we keep track of which index is the \"closest\" to the drag start point.\n  // It is set onMouseDown/onTouchDown; see trackProps below.\n  const realTimeTrackDraggingIndex = useRef<number | null>(null);\n\n  const stateRef = useRef<SliderState>(null);\n  stateRef.current = state;\n  const reverseX = direction === 'rtl';\n  const currentPosition = useRef<number>(null);\n  const { moveProps } = useMove({\n    onMoveStart() {\n      currentPosition.current = null;\n    },\n    onMove({ deltaX, deltaY }) {\n      let size = isVertical ? trackLayout.height : trackLayout.width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current =\n          stateRef.current.getThumbPercent(realTimeTrackDraggingIndex.current) *\n          size;\n      }\n\n      let delta = isVertical ? deltaY : deltaX;\n      if (isVertical || reverseX) {\n        delta = -delta;\n      }\n\n      currentPosition.current += delta;\n\n      if (realTimeTrackDraggingIndex.current != null) {\n        const percent = clamp(currentPosition.current / size, 0, 1);\n        stateRef.current.setThumbPercent(\n          realTimeTrackDraggingIndex.current,\n          percent\n        );\n      }\n    },\n    onMoveEnd() {\n      if (realTimeTrackDraggingIndex.current != null) {\n        stateRef.current.setThumbDragging(\n          realTimeTrackDraggingIndex.current,\n          false\n        );\n        realTimeTrackDraggingIndex.current = null;\n      }\n    },\n  });\n\n  let currentPointer = useRef<number | null | undefined>(undefined);\n  let onDownTrack = (\n    e: React.UIEvent,\n    id: number,\n    clientX: number,\n    clientY: number\n  ) => {\n    // We only trigger track-dragging if the user clicks on the track itself and nothing is currently being dragged.\n    if (\n      !props.isDisabled &&\n      state.values.every((_, i) => !state.isThumbDragging(i))\n    ) {\n      let size = isVertical ? trackLayout.height : trackLayout.width;\n      // Find the closest thumb\n      const trackPosition = trackLayout[isVertical ? 'top' : 'left'];\n      const clickPosition = isVertical ? clientY : clientX;\n      const offset = clickPosition - trackPosition;\n      let percent = offset / size;\n      if (direction === 'rtl' || isVertical) {\n        percent = 1 - percent;\n      }\n      let value = state.getPercentValue(percent);\n\n      // to find the closet thumb we split the array based on the first thumb position to the \"right/end\" of the click.\n      let closestThumb;\n      let split = state.values.findIndex((v) => value - v < 0);\n      if (split === 0) {\n        // If the index is zero then the closetThumb is the first one\n        closestThumb = split;\n      } else if (split === -1) {\n        // If no index is found they've clicked past all the thumbs\n        closestThumb = state.values.length - 1;\n      } else {\n        let lastLeft = state.values[split - 1];\n        let firstRight = state.values[split];\n        // Pick the last left/start thumb, unless they are stacked on top of each other, then pick the right/end one\n        if (Math.abs(lastLeft - value) < Math.abs(firstRight - value)) {\n          closestThumb = split - 1;\n        } else {\n          closestThumb = split;\n        }\n      }\n\n      // Confirm that the found closest thumb is editable, not disabled, and move it\n      if (closestThumb >= 0 && state.isThumbEditable(closestThumb)) {\n        // Don't unfocus anything\n        e.preventDefault();\n\n        realTimeTrackDraggingIndex.current = closestThumb;\n        state.setFocusedThumb(closestThumb);\n        currentPointer.current = id;\n\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, true);\n        state.setThumbValue(closestThumb, value);\n\n        addGlobalListener(window, 'mouseup', onUpTrack, false);\n        addGlobalListener(window, 'touchend', onUpTrack, false);\n        addGlobalListener(window, 'pointerup', onUpTrack, false);\n      } else {\n        realTimeTrackDraggingIndex.current = null;\n      }\n    }\n  };\n\n  let onUpTrack = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (id === currentPointer.current) {\n      if (realTimeTrackDraggingIndex.current != null) {\n        state.setThumbDragging(realTimeTrackDraggingIndex.current, false);\n        realTimeTrackDraggingIndex.current = null;\n      }\n\n      removeGlobalListener(window, 'mouseup', onUpTrack, false);\n      removeGlobalListener(window, 'touchend', onUpTrack, false);\n      removeGlobalListener(window, 'pointerup', onUpTrack, false);\n    }\n  };\n\n  if (labelProps.htmlFor) {\n    // Ideally the `for` attribute should point to the first thumb, but VoiceOver on iOS\n    // causes this to override the `aria-labelledby` on the thumb. This causes the first\n    // thumb to only be announced as the slider label rather than its individual name as well.\n    // See https://bugs.webkit.org/show_bug.cgi?id=172464.\n    delete labelProps.htmlFor;\n    labelProps.onClick = () => {\n      // Safari does not focus <input type=\"range\"> elements when clicking on an associated <label>,\n      // so do it manually. In addition, make sure we show the focus ring.\n      document.getElementById(getSliderThumbId(state, 0))?.focus();\n      setInteractionModality('keyboard');\n    };\n  }\n\n  return {\n    labelProps,\n    // The root element of the Slider will have role=\"group\" to group together\n    // all the thumb inputs in the Slider.  The label of the Slider will\n    // be used to label the group.\n    groupProps: {\n      role: 'group',\n      ...fieldProps,\n    },\n    trackProps: mergeProps(\n      {\n        onMouseDown(e: React.MouseEvent<HTMLElement>) {\n          if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n            return;\n          }\n          onDownTrack(e, undefined, e.clientX, e.clientY);\n        },\n        onPointerDown(e: React.PointerEvent<HTMLElement>) {\n          if (\n            e.pointerType === 'mouse' &&\n            (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)\n          ) {\n            return;\n          }\n          onDownTrack(e, e.pointerId, e.clientX, e.clientY);\n        },\n        onTouchStart(e: React.TouchEvent<HTMLElement>) {\n          onDownTrack(\n            e,\n            e.changedTouches[0].identifier,\n            e.changedTouches[0].clientX,\n            e.changedTouches[0].clientY\n          );\n        },\n      },\n      moveProps\n    ),\n    outputProps: {\n      'htmlFor': state.values\n        .map((_, index) => getSliderThumbId(state, index))\n        .join(' '),\n      'aria-live': 'off',\n    },\n  };\n}\n\nexport const useSlider = (props: any, state: any, ref: any) => {\n  let { groupProps: webGroupProps, ...rest } = useSliderWeb(props, state, ref);\n  let groupProps = mapDomPropsToRN(webGroupProps);\n  let labelProps = mapDomPropsToRN(rest.labelProps);\n  return { groupProps, ...rest, labelProps };\n};\n"]},"metadata":{},"sourceType":"module"}