{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport React from 'react';\nexport var getResponsiveStylesImpl = function getResponsiveStylesImpl(width) {\n  return function (queries) {\n    if (typeof width === 'number') {\n      var styles = queries.initial ? [StyleSheet.create({\n        initial: StyleSheet.flatten(queries.initial)\n      }).initial] : [];\n\n      if (queries.query) {\n        queries.query.forEach(function (queryRule) {\n          if (queryRule.style) {\n            var flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n            if (typeof queryRule.maxWidth === 'number' && typeof queryRule.minWidth === 'number') {\n              if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n                styles.push(StyleSheet.create({\n                  rangeStyle: flattenQueryStyle\n                }).rangeStyle);\n              }\n            } else if (typeof queryRule.minWidth === 'number') {\n              if (width >= queryRule.minWidth) {\n                styles.push(StyleSheet.create({\n                  minWidthStyle: flattenQueryStyle\n                }).minWidthStyle);\n              }\n            } else if (typeof queryRule.maxWidth === 'number') {\n              if (width <= queryRule.maxWidth) {\n                styles.push(StyleSheet.create({\n                  maxWidthStyle: flattenQueryStyle\n                }).maxWidthStyle);\n              }\n            }\n          }\n        });\n        return {\n          styles: styles\n        };\n      }\n    }\n\n    return {};\n  };\n};\nexport var useDimensionsWithEnable = function useDimensionsWithEnable(_ref) {\n  var enable = _ref.enable;\n\n  var _React$useState = React.useState(function () {\n    return Dimensions.get('window');\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (enable) {\n      function handleChange(_ref2) {\n        var window = _ref2.window;\n\n        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n          setDimensions(window);\n        }\n      }\n\n      Dimensions.addEventListener('change', handleChange);\n      handleChange({\n        window: Dimensions.get('window')\n      });\n      return function () {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n\n    return function () {};\n  }, [dimensions, enable]);\n  return dimensions;\n};","map":{"version":3,"mappings":"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","names":["React","getResponsiveStylesImpl","width","queries","styles","initial","StyleSheet","create","flatten","query","forEach","queryRule","style","flattenQueryStyle","maxWidth","minWidth","push","rangeStyle","minWidthStyle","maxWidthStyle","useDimensionsWithEnable","enable","useState","Dimensions","get","dimensions","setDimensions","useEffect","handleChange","window","height","scale","fontScale","addEventListener","removeEventListener"],"sources":["common.ts"],"sourcesContent":["import type {\n  GetResponsiveStylesParams,\n  GetResponsiveStylesReturnType,\n} from './types';\nimport { Dimensions, ScaledSize, StyleSheet } from 'react-native';\nimport React from 'react';\n\nexport const getResponsiveStylesImpl = (width: number) => (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  if (typeof width === 'number') {\n    let styles = queries.initial\n      ? [\n          StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n            .initial,\n        ]\n      : [];\n\n    if (queries.query) {\n      queries.query.forEach((queryRule) => {\n        if (queryRule.style) {\n          const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n          if (\n            typeof queryRule.maxWidth === 'number' &&\n            typeof queryRule.minWidth === 'number'\n          ) {\n            if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ rangeStyle: flattenQueryStyle }).rangeStyle\n              );\n            }\n          } else if (typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth) {\n              styles.push(\n                StyleSheet.create({ minWidthStyle: flattenQueryStyle })\n                  .minWidthStyle\n              );\n            }\n          } else if (typeof queryRule.maxWidth === 'number') {\n            if (width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ maxWidthStyle: flattenQueryStyle })\n                  .maxWidthStyle\n              );\n            }\n          }\n        }\n      });\n      return { styles };\n    }\n  }\n\n  return {};\n};\n\n// The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\nexport const useDimensionsWithEnable = ({ enable }: { enable?: boolean }) => {\n  const [dimensions, setDimensions] = React.useState(() =>\n    Dimensions.get('window')\n  );\n\n  React.useEffect(() => {\n    if (enable) {\n      function handleChange({ window }: { window: ScaledSize }) {\n        if (\n          dimensions.width !== window.width ||\n          dimensions.height !== window.height ||\n          dimensions.scale !== window.scale ||\n          dimensions.fontScale !== window.fontScale\n        ) {\n          setDimensions(window);\n        }\n      }\n      Dimensions.addEventListener('change', handleChange);\n      // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n      handleChange({ window: Dimensions.get('window') });\n\n      return () => {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n    return () => {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n"]},"metadata":{},"sourceType":"module"}