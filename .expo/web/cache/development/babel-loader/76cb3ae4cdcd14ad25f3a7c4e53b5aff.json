{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"_icon\", \"onPressIn\", \"onPressOut\", \"onHoverIn\", \"onHoverOut\", \"onFocus\", \"onBlur\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { AlertDialogContext } from \"./Context\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { Pressable } from \"../../primitives/Pressable\";\nimport { CloseIcon } from \"../../primitives/Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useHover, useFocus, useIsPressed } from \"../../primitives/Pressable/Pressable\";\nimport { composeEventHandlers } from \"../../../utils\";\nimport { useFocusRing } from '@react-native-aria/focus';\n\nvar AlertDialogCloseButton = function AlertDialogCloseButton(props, ref) {\n  var _useHover = useHover(),\n      hoverProps = _useHover.hoverProps,\n      isHovered = _useHover.isHovered;\n\n  var _useIsPressed = useIsPressed(),\n      pressableProps = _useIsPressed.pressableProps,\n      isPressed = _useIsPressed.isPressed;\n\n  var _useFocus = useFocus(),\n      focusProps = _useFocus.focusProps,\n      isFocused = _useFocus.isFocused;\n\n  var _useFocusRing = useFocusRing(),\n      isFocusVisible = _useFocusRing.isFocusVisible,\n      focusRingProps = _useFocusRing.focusProps;\n\n  var _usePropsResolution = usePropsResolution('AlertDialogCloseButton', props, {\n    isHovered: isHovered,\n    isPressed: isPressed,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  }),\n      _icon = _usePropsResolution._icon,\n      onPressIn = _usePropsResolution.onPressIn,\n      onPressOut = _usePropsResolution.onPressOut,\n      onHoverIn = _usePropsResolution.onHoverIn,\n      onHoverOut = _usePropsResolution.onHoverOut,\n      onFocus = _usePropsResolution.onFocus,\n      onBlur = _usePropsResolution.onBlur,\n      rest = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var _React$useContext = React.useContext(AlertDialogContext),\n      handleClose = _React$useContext.handleClose;\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Pressable, _extends({\n    accessibilityRole: \"button\",\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut),\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn),\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut),\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus),\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur),\n    onPress: handleClose\n  }, rest), React.createElement(CloseIcon, _icon));\n};\n\nexport default memo(forwardRef(AlertDialogCloseButton));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,kBAAT;AACA,SAASC,kBAAT;AACA,SAASC,SAAT;AACA,SAASC,SAAT;AAEA,SAASC,qBAAT;AACA,SACEC,QADF,EAEEC,QAFF,EAGEC,YAHF;AAKA,SAASC,oBAAT;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAAsBC,GAAtB,EAAoC;EACjE,gBAAkCP,QAAQ,EAA1C;EAAA,IAAQQ,UAAR,aAAQA,UAAR;EAAA,IAAoBC,SAApB,aAAoBA,SAApB;;EACA,oBAAsCP,YAAY,EAAlD;EAAA,IAAQQ,cAAR,iBAAQA,cAAR;EAAA,IAAwBC,SAAxB,iBAAwBA,SAAxB;;EACA,gBAAkCV,QAAQ,EAA1C;EAAA,IAAQW,UAAR,aAAQA,UAAR;EAAA,IAAoBC,SAApB,aAAoBA,SAApB;;EACA,oBAA4DT,YAAY,EAAxE;EAAA,IAAQU,cAAR,iBAAQA,cAAR;EAAA,IAAoCC,cAApC,iBAAwBH,UAAxB;;EAEA,0BASIhB,kBAAkB,CAAC,wBAAD,EAA2BU,KAA3B,EAAkC;IACtDG,SADsD,EACtDA,SADsD;IAEtDE,SAFsD,EAEtDA,SAFsD;IAGtDE,SAHsD,EAGtDA,SAHsD;IAItDC;EAJsD,CAAlC,CATtB;EAAA,IACEE,KADF,uBACEA,KADF;EAAA,IAEEC,SAFF,uBAEEA,SAFF;EAAA,IAGEC,UAHF,uBAGEA,UAHF;EAAA,IAIEC,SAJF,uBAIEA,SAJF;EAAA,IAKEC,UALF,uBAKEA,UALF;EAAA,IAMEC,OANF,uBAMEA,OANF;EAAA,IAOEC,MAPF,uBAOEA,MAPF;EAAA,IAQKC,IARL;;EAeA,wBAAwB/B,KAAK,CAACgC,UAANhC,CAAiBG,kBAAjBH,CAAxB;EAAA,IAAQiC,WAAR,qBAAQA,WAAR;;EAEA,IAAI1B,qBAAqB,CAACO,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,OACEd,oBAACK,SAAD;IACE6B,iBAAiB,EAAC,QADpB;IAEEnB,GAAG,EAAEA,GAFP;IAGEU,SAAS,EAAEd,oBAAoB,CAACc,SAAD,EAAYP,cAAc,CAACO,SAA3B,CAHjC;IAIEC,UAAU,EAAEf,oBAAoB,CAACe,UAAD,EAAaR,cAAc,CAACQ,UAA5B,CAJlC;IAMEC,SAAS,EAAEhB,oBAAoB,CAACgB,SAAD,EAAYX,UAAU,CAACW,SAAvB,CANjC;IAQEC,UAAU,EAAEjB,oBAAoB,CAACiB,UAAD,EAAaZ,UAAU,CAACY,UAAxB,CARlC;IAUEC,OAAO,EAAElB,oBAAoB,CAC3BA,oBAAoB,CAACkB,OAAD,EAAUT,UAAU,CAACS,OAArB,CADO,EAE3BN,cAAc,CAACM,OAFY,CAV/B;IAeEC,MAAM,EAAEnB,oBAAoB,CAC1BA,oBAAoB,CAACmB,MAAD,EAASV,UAAU,CAACU,MAApB,CADM,EAE1BP,cAAc,CAACO,MAFW,CAf9B;IAmBEK,OAAO,EAAEF;EAnBX,GAoBMF,IApBN,GAsBE/B,oBAACM,SAAD,EAAekB,KAAf,CAtBF,CADF;AA1BF;;AAsDA,eAAevB,IAAI,CAACC,UAAU,CAACW,sBAAD,CAAX,CAAnB","names":["React","memo","forwardRef","AlertDialogContext","usePropsResolution","Pressable","CloseIcon","useHasResponsiveProps","useHover","useFocus","useIsPressed","composeEventHandlers","useFocusRing","AlertDialogCloseButton","props","ref","hoverProps","isHovered","pressableProps","isPressed","focusProps","isFocused","isFocusVisible","focusRingProps","_icon","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","rest","useContext","handleClose","accessibilityRole","onPress"],"sources":["AlertDialogCloseButton.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { AlertDialogContext } from './Context';\nimport { usePropsResolution } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport type { IButtonProps } from '../../primitives/Button';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { composeEventHandlers } from '../../../utils';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst AlertDialogCloseButton = (props: IButtonProps, ref?: any) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...rest\n  } = usePropsResolution('AlertDialogCloseButton', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n    isFocusVisible,\n  });\n  const { handleClose } = React.useContext(AlertDialogContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      onPress={handleClose}\n      {...rest}\n    >\n      <CloseIcon {..._icon} />\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(AlertDialogCloseButton));\n"]},"metadata":{},"sourceType":"module"}