{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getSortedProps, calculatePaddingProps } from \"./utils\";\nimport { useTheme } from \"./../useTheme\";\nexport function useSafeArea(props) {\n  var insets = useSafeAreaInsets();\n  var sizes = useTheme().sizes;\n\n  var _getSortedProps = getSortedProps(props),\n      safeAreaProps = _getSortedProps.safeAreaProps,\n      paddingProps = _getSortedProps.paddingProps,\n      sansPaddingProps = _getSortedProps.sansPaddingProps;\n\n  if (!Object.keys(safeAreaProps).length) {\n    return props;\n  }\n\n  var calcualtedPaddingProps = calculatePaddingProps(safeAreaProps, paddingProps, insets, sizes);\n  return _objectSpread(_objectSpread(_objectSpread({}, sansPaddingProps), paddingProps), calcualtedPaddingProps);\n}","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,iBAAT,QAAkC,gCAAlC;AACA,SAASC,cAAT,EAAyBC,qBAAzB;AACA,SAASC,QAAT;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAAiC;EACtC,IAAMC,MAAM,GAAGN,iBAAiB,EAAhC;EACA,IAAMO,KAAK,GAAGJ,QAAQ,GAAGI,KAAzB;;EACA,sBAA0DN,cAAc,CACtEI,KADsE,CAAxE;EAAA,IAAQG,aAAR,mBAAQA,aAAR;EAAA,IAAuBC,YAAvB,mBAAuBA,YAAvB;EAAA,IAAqCC,gBAArC,mBAAqCA,gBAArC;;EAGA,IAAI,CAACC,MAAM,CAACC,IAAPD,CAAYH,aAAZG,EAA2BE,MAAhC,EAAwC;IACtC,OAAOR,KAAP;EACD;;EACD,IAAIS,sBAAsB,GAAGZ,qBAAqB,CAChDM,aADgD,EAEhDC,YAFgD,EAGhDH,MAHgD,EAIhDC,KAJgD,CAAlD;EAMA,qDAAYG,gBAAZ,GAAiCD,YAAjC,GAAkDK,sBAAlD;AACD","names":["useSafeAreaInsets","getSortedProps","calculatePaddingProps","useTheme","useSafeArea","props","insets","sizes","safeAreaProps","paddingProps","sansPaddingProps","Object","keys","length","calcualtedPaddingProps"],"sources":["index.ts"],"sourcesContent":["import { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getSortedProps, calculatePaddingProps } from './utils';\nimport { useTheme } from './../useTheme';\n\nexport function useSafeArea(props: any) {\n  const insets = useSafeAreaInsets();\n  const sizes = useTheme().sizes;\n  const { safeAreaProps, paddingProps, sansPaddingProps } = getSortedProps(\n    props\n  );\n  if (!Object.keys(safeAreaProps).length) {\n    return props;\n  }\n  let calcualtedPaddingProps = calculatePaddingProps(\n    safeAreaProps,\n    paddingProps,\n    insets,\n    sizes\n  );\n  return { ...sansPaddingProps, ...paddingProps, ...calcualtedPaddingProps };\n}\n"]},"metadata":{},"sourceType":"module"}