{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"startIcon\", \"rightIcon\", \"leftIcon\", \"endIcon\", \"spinner\", \"isDisabled\", \"isLoading\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\", \"spinnerPlacement\"],\n    _excluded2 = [\"onPressIn\", \"onPressOut\", \"onHoverIn\", \"onHoverOut\", \"onFocus\", \"onBlur\", \"_text\", \"_stack\", \"_spinner\", \"isLoadingText\", \"_icon\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Spinner from \"../Spinner\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { default as Box } from \"../Box\";\nimport HStack from \"../Stack/HStack\";\nimport { Pressable } from \"../Pressable\";\nimport { composeEventHandlers } from \"../../../utils\";\nimport { useHover, useFocus, useIsPressed } from \"../../primitives/Pressable/Pressable\";\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Button = function Button(_ref, ref) {\n  var children = _ref.children,\n      startIcon = _ref.startIcon,\n      rightIcon = _ref.rightIcon,\n      leftIcon = _ref.leftIcon,\n      endIcon = _ref.endIcon,\n      spinner = _ref.spinner,\n      isDisabled = _ref.isDisabled,\n      isLoading = _ref.isLoading,\n      isHoveredProp = _ref.isHovered,\n      isPressedProp = _ref.isPressed,\n      isFocusedProp = _ref.isFocused,\n      isFocusVisibleProp = _ref.isFocusVisible,\n      _ref$spinnerPlacement = _ref.spinnerPlacement,\n      spinnerPlacement = _ref$spinnerPlacement === void 0 ? 'start' : _ref$spinnerPlacement,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _props$accessibilityR;\n\n  var _useHover = useHover(),\n      hoverProps = _useHover.hoverProps,\n      isHovered = _useHover.isHovered;\n\n  var _useIsPressed = useIsPressed(),\n      pressableProps = _useIsPressed.pressableProps,\n      isPressed = _useIsPressed.isPressed;\n\n  var _useFocus = useFocus(),\n      focusProps = _useFocus.focusProps,\n      isFocused = _useFocus.isFocused;\n\n  var _useFocusRing = useFocusRing(),\n      isFocusVisible = _useFocusRing.isFocusVisible,\n      focusRingProps = _useFocusRing.focusProps;\n\n  var _usePropsResolution = usePropsResolution('Button', props, {\n    isDisabled: isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isPressed: isPressedProp || isPressed,\n    isLoading: isLoading,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible\n  }),\n      onPressIn = _usePropsResolution.onPressIn,\n      onPressOut = _usePropsResolution.onPressOut,\n      onHoverIn = _usePropsResolution.onHoverIn,\n      onHoverOut = _usePropsResolution.onHoverOut,\n      onFocus = _usePropsResolution.onFocus,\n      onBlur = _usePropsResolution.onBlur,\n      _text = _usePropsResolution._text,\n      _stack = _usePropsResolution._stack,\n      _spinner = _usePropsResolution._spinner,\n      isLoadingText = _usePropsResolution.isLoadingText,\n      _icon = _usePropsResolution._icon,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(endIcon, function (child, index) {\n      return React.cloneElement(child, _objectSpread(_objectSpread({\n        key: \"button-end-icon-\".concat(index)\n      }, _icon), child.props));\n    });\n  }\n\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(startIcon, function (child, index) {\n      return React.cloneElement(child, _objectSpread(_objectSpread({\n        key: \"button-start-icon-\".concat(index)\n      }, _icon), child.props));\n    });\n  }\n\n  var spinnerElement = spinner ? spinner : React.createElement(Spinner, _extends({\n    color: _text === null || _text === void 0 ? void 0 : _text.color\n  }, _spinner));\n\n  var boxChildren = function boxChildren(child) {\n    return child ? React.createElement(Box, {\n      _text: _text\n    }, child) : null;\n  };\n\n  return React.createElement(Pressable, _extends({\n    disabled: isDisabled || isLoading,\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut),\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn),\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut),\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus),\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur)\n  }, resolvedProps, {\n    accessibilityRole: (_props$accessibilityR = props.accessibilityRole) !== null && _props$accessibilityR !== void 0 ? _props$accessibilityR : 'button'\n  }), React.createElement(HStack, _extends({}, _stack, {\n    test: true\n  }), startIcon && !isLoading ? startIcon : null, isLoading && spinnerPlacement === 'start' ? spinnerElement : null, isLoading ? isLoadingText ? boxChildren(isLoadingText) : null : boxChildren(children), endIcon && !isLoading ? endIcon : null, isLoading && spinnerPlacement === 'end' ? spinnerElement : null));\n};\n\nexport default memo(forwardRef(Button));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","Spinner","usePropsResolution","default","Box","HStack","Pressable","composeEventHandlers","useHover","useFocus","useIsPressed","useFocusRing","useHasResponsiveProps","Button","ref","children","startIcon","rightIcon","leftIcon","endIcon","spinner","isDisabled","isLoading","isHoveredProp","isHovered","isPressedProp","isPressed","isFocusedProp","isFocused","isFocusVisibleProp","isFocusVisible","spinnerPlacement","props","hoverProps","pressableProps","focusProps","focusRingProps","onPressIn","onPressOut","onHoverIn","onHoverOut","onFocus","onBlur","_text","_stack","_spinner","isLoadingText","_icon","resolvedProps","isValidElement","Children","map","child","index","cloneElement","key","spinnerElement","color","boxChildren","disabled","accessibilityRole","test"],"sources":["Button.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Spinner from '../Spinner';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { default as Box, IBoxProps } from '../Box';\nimport HStack from '../Stack/HStack';\nimport { Pressable } from '../Pressable';\nimport type { IButtonProps } from './types';\nimport { composeEventHandlers } from '../../../utils';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Button = (\n  {\n    //@ts-ignore\n    children,\n    startIcon,\n    rightIcon,\n    leftIcon,\n    endIcon,\n    spinner,\n    isDisabled,\n    isLoading,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    spinnerPlacement = 'start',\n    ...props\n  }: IButtonProps & IBoxProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    _text,\n    _stack,\n    _spinner,\n    isLoadingText,\n    _icon,\n    ...resolvedProps\n  } = usePropsResolution('Button', props, {\n    isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isPressed: isPressedProp || isPressed,\n    isLoading,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (leftIcon) {\n    startIcon = leftIcon;\n  }\n  if (rightIcon) {\n    endIcon = rightIcon;\n  }\n  if (endIcon && React.isValidElement(endIcon)) {\n    endIcon = React.Children.map(\n      endIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-end-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n  if (startIcon && React.isValidElement(startIcon)) {\n    startIcon = React.Children.map(\n      startIcon,\n      (child: JSX.Element, index: number) => {\n        return React.cloneElement(child, {\n          key: `button-start-icon-${index}`,\n          ..._icon,\n          ...child.props,\n        });\n      }\n    );\n  }\n\n  const spinnerElement = spinner ? (\n    spinner\n  ) : (\n    <Spinner color={_text?.color} {..._spinner} />\n  );\n\n  const boxChildren = (child: any) => {\n    return child ? <Box _text={_text}>{child}</Box> : null;\n  };\n\n  return (\n    <Pressable\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n      accessibilityRole={props.accessibilityRole ?? 'button'}\n    >\n      <HStack {..._stack} test={true}>\n        {startIcon && !isLoading ? startIcon : null}\n        {isLoading && spinnerPlacement === 'start' ? spinnerElement : null}\n        {isLoading\n          ? isLoadingText\n            ? boxChildren(isLoadingText)\n            : null\n          : boxChildren(children)}\n\n        {endIcon && !isLoading ? endIcon : null}\n        {isLoading && spinnerPlacement === 'end' ? spinnerElement : null}\n      </HStack>\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(Button));\n"]},"metadata":{},"sourceType":"module"}