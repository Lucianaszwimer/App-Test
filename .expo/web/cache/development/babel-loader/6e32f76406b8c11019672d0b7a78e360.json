{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { useRef as $Qsto2$useRef, useState as $Qsto2$useState, useMemo as $Qsto2$useMemo, useEffect as $Qsto2$useEffect } from \"react\";\nimport { useControlledState as $Qsto2$useControlledState } from \"@react-stately/utils\";\n\nvar $e40ea825a81a3709$export$52baac22726c72bf = function (_Set) {\n  _inherits($e40ea825a81a3709$export$52baac22726c72bf, _Set);\n\n  var _super = _createSuper($e40ea825a81a3709$export$52baac22726c72bf);\n\n  function $e40ea825a81a3709$export$52baac22726c72bf(keys, anchorKey, currentKey) {\n    var _this;\n\n    _classCallCheck(this, $e40ea825a81a3709$export$52baac22726c72bf);\n\n    _this = _super.call(this, keys);\n\n    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {\n      _this.anchorKey = anchorKey || keys.anchorKey;\n      _this.currentKey = currentKey || keys.currentKey;\n    } else {\n      _this.anchorKey = anchorKey;\n      _this.currentKey = currentKey;\n    }\n\n    return _this;\n  }\n\n  return _createClass($e40ea825a81a3709$export$52baac22726c72bf);\n}(_wrapNativeSuper(Set));\n\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(setA), _step; !(_step = _iterator()).done;) {\n    var item = _step.value;\n    if (!setB.has(item)) return false;\n  }\n\n  return true;\n}\n\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  var _props$selectionMode = props.selectionMode,\n      selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode,\n      disallowEmptySelection = props.disallowEmptySelection,\n      allowDuplicateSelectionEvents = props.allowDuplicateSelectionEvents,\n      _props$selectionBehav = props.selectionBehavior,\n      selectionBehaviorProp = _props$selectionBehav === void 0 ? 'toggle' : _props$selectionBehav,\n      _props$disabledBehavi = props.disabledBehavior,\n      disabledBehavior = _props$disabledBehavi === void 0 ? 'all' : _props$disabledBehavi;\n  var isFocusedRef = $Qsto2$useRef(false);\n\n  var _$Qsto2$useState = $Qsto2$useState(false),\n      _$Qsto2$useState2 = _slicedToArray(_$Qsto2$useState, 2),\n      _setFocused = _$Qsto2$useState2[1];\n\n  var focusedKeyRef = $Qsto2$useRef(null);\n  var childFocusStrategyRef = $Qsto2$useRef(null);\n\n  var _$Qsto2$useState3 = $Qsto2$useState(null),\n      _$Qsto2$useState4 = _slicedToArray(_$Qsto2$useState3, 2),\n      _setFocusedKey = _$Qsto2$useState4[1];\n\n  var selectedKeysProp = $Qsto2$useMemo(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys);\n  }, [props.selectedKeys]);\n  var defaultSelectedKeys = $Qsto2$useMemo(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new $e40ea825a81a3709$export$52baac22726c72bf());\n  }, [props.defaultSelectedKeys]);\n\n  var _$Qsto2$useControlled = $Qsto2$useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange),\n      _$Qsto2$useControlled2 = _slicedToArray(_$Qsto2$useControlled, 2),\n      selectedKeys = _$Qsto2$useControlled2[0],\n      _setSelectedKeys = _$Qsto2$useControlled2[1];\n\n  var disabledKeysProp = $Qsto2$useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n\n  var _$Qsto2$useState5 = $Qsto2$useState(selectionBehaviorProp),\n      _$Qsto2$useState6 = _slicedToArray(_$Qsto2$useState5, 2),\n      selectionBehavior = _$Qsto2$useState6[0],\n      setSelectionBehavior = _$Qsto2$useState6[1];\n\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');\n  var lastSelectionBehavior = $Qsto2$useRef(selectionBehaviorProp);\n  $Qsto2$useEffect(function () {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n\n    setFocused: function setFocused(f) {\n      isFocusedRef.current = f;\n\n      _setFocused(f);\n    },\n\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n\n    setFocusedKey: function setFocusedKey(k) {\n      var childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'first';\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n\n      _setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys: function setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) _setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior: disabledBehavior\n  };\n}\n\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === 'all' ? 'all' : new $e40ea825a81a3709$export$52baac22726c72bf(selection);\n}\n\nvar $d496c0a20b6e58ec$export$6c8a5aaad13c9852 = function () {\n  function $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, state, options) {\n    _classCallCheck(this, $d496c0a20b6e58ec$export$6c8a5aaad13c9852);\n\n    this.collection = collection;\n    this.state = state;\n    var ref;\n    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;\n    this._isSelectAll = null;\n  }\n\n  _createClass($d496c0a20b6e58ec$export$6c8a5aaad13c9852, [{\n    key: \"selectionMode\",\n    get: function get() {\n      return this.state.selectionMode;\n    }\n  }, {\n    key: \"disallowEmptySelection\",\n    get: function get() {\n      return this.state.disallowEmptySelection;\n    }\n  }, {\n    key: \"selectionBehavior\",\n    get: function get() {\n      return this.state.selectionBehavior;\n    }\n  }, {\n    key: \"setSelectionBehavior\",\n    value: function setSelectionBehavior(selectionBehavior) {\n      this.state.setSelectionBehavior(selectionBehavior);\n    }\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return this.state.isFocused;\n    }\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(isFocused) {\n      this.state.setFocused(isFocused);\n    }\n  }, {\n    key: \"focusedKey\",\n    get: function get() {\n      return this.state.focusedKey;\n    }\n  }, {\n    key: \"childFocusStrategy\",\n    get: function get() {\n      return this.state.childFocusStrategy;\n    }\n  }, {\n    key: \"setFocusedKey\",\n    value: function setFocusedKey(key, childFocusStrategy) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }, {\n    key: \"selectedKeys\",\n    get: function get() {\n      return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n  }, {\n    key: \"rawSelection\",\n    get: function get() {\n      return this.state.selectedKeys;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(key) {\n      if (this.state.selectionMode === 'none') return false;\n      key = this.getKey(key);\n      return this.state.selectedKeys === 'all' ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n    }\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n    }\n  }, {\n    key: \"isSelectAll\",\n    get: function get() {\n      if (this.isEmpty) return false;\n      if (this.state.selectedKeys === 'all') return true;\n      if (this._isSelectAll != null) return this._isSelectAll;\n      var allKeys = this.getSelectAllKeys();\n      var selectedKeys = this.state.selectedKeys;\n      this._isSelectAll = allKeys.every(function (k) {\n        return selectedKeys.has(k);\n      });\n      return this._isSelectAll;\n    }\n  }, {\n    key: \"firstSelectedKey\",\n    get: function get() {\n      var first = null;\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step2; !(_step2 = _iterator2()).done;) {\n        var key = _step2.value;\n        var item = this.collection.getItem(key);\n        if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n      }\n\n      return first === null || first === void 0 ? void 0 : first.key;\n    }\n  }, {\n    key: \"lastSelectedKey\",\n    get: function get() {\n      var last = null;\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value;\n        var item = this.collection.getItem(key);\n        if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n      }\n\n      return last === null || last === void 0 ? void 0 : last.key;\n    }\n  }, {\n    key: \"disabledKeys\",\n    get: function get() {\n      return this.state.disabledKeys;\n    }\n  }, {\n    key: \"disabledBehavior\",\n    get: function get() {\n      return this.state.disabledBehavior;\n    }\n  }, {\n    key: \"extendSelection\",\n    value: function extendSelection(toKey) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single') {\n        this.replaceSelection(toKey);\n        return;\n      }\n\n      toKey = this.getKey(toKey);\n      var selection;\n      if (this.state.selectedKeys === 'all') selection = new $e40ea825a81a3709$export$52baac22726c72bf([toKey], toKey, toKey);else {\n        var selectedKeys = this.state.selectedKeys;\n        var anchorKey = selectedKeys.anchorKey || toKey;\n        selection = new $e40ea825a81a3709$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);\n\n        for (var _iterator4 = _createForOfIteratorHelperLoose(this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)), _step4; !(_step4 = _iterator4()).done;) {\n          var key = _step4.value;\n          selection.delete(key);\n        }\n\n        for (var _iterator5 = _createForOfIteratorHelperLoose(this.getKeyRange(toKey, anchorKey)), _step5; !(_step5 = _iterator5()).done;) {\n          var key1 = _step5.value;\n          if (this.canSelectItem(key1)) selection.add(key1);\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getKeyRange\",\n    value: function getKeyRange(from, to) {\n      var fromItem = this.collection.getItem(from);\n      var toItem = this.collection.getItem(to);\n\n      if (fromItem && toItem) {\n        if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n        return this.getKeyRangeInternal(to, from);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getKeyRangeInternal\",\n    value: function getKeyRangeInternal(from, to) {\n      var keys = [];\n      var key = from;\n\n      while (key) {\n        var item = this.collection.getItem(key);\n        if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);\n        if (key === to) return keys;\n        key = this.collection.getKeyAfter(key);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(key) {\n      var item = this.collection.getItem(key);\n      if (!item) return key;\n      if (item.type === 'cell' && this.allowsCellSelection) return key;\n\n      while (item.type !== 'item' && item.parentKey != null) {\n        item = this.collection.getItem(item.parentKey);\n      }\n\n      if (!item || item.type !== 'item') return null;\n      return item.key;\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(key) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single' && !this.isSelected(key)) {\n        this.replaceSelection(key);\n        return;\n      }\n\n      key = this.getKey(key);\n      if (key == null) return;\n      var keys = new $e40ea825a81a3709$export$52baac22726c72bf(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n      if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n      if (this.disallowEmptySelection && keys.size === 0) return;\n      this.state.setSelectedKeys(keys);\n    }\n  }, {\n    key: \"replaceSelection\",\n    value: function replaceSelection(key) {\n      if (this.selectionMode === 'none') return;\n      key = this.getKey(key);\n      if (key == null) return;\n      var selection = this.canSelectItem(key) ? new $e40ea825a81a3709$export$52baac22726c72bf([key], key, key) : new $e40ea825a81a3709$export$52baac22726c72bf();\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"setSelectedKeys\",\n    value: function setSelectedKeys(keys) {\n      if (this.selectionMode === 'none') return;\n      var selection = new $e40ea825a81a3709$export$52baac22726c72bf();\n\n      for (var _iterator6 = _createForOfIteratorHelperLoose(keys), _step6; !(_step6 = _iterator6()).done;) {\n        var key = _step6.value;\n        key = this.getKey(key);\n\n        if (key != null) {\n          selection.add(key);\n          if (this.selectionMode === 'single') break;\n        }\n      }\n\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getSelectAllKeys\",\n    value: function getSelectAllKeys() {\n      var _this2 = this;\n\n      var keys = [];\n\n      var addKeys = function addKeys(key) {\n        while (key) {\n          if (_this2.canSelectItem(key)) {\n            var item = _this2.collection.getItem(key);\n\n            if (item.type === 'item') keys.push(key);\n            if (item.hasChildNodes && (_this2.allowsCellSelection || item.type !== 'item')) addKeys(_toConsumableArray(item.childNodes)[0].key);\n          }\n\n          key = _this2.collection.getKeyAfter(key);\n        }\n      };\n\n      addKeys(this.collection.getFirstKey());\n      return keys;\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf());\n    }\n  }, {\n    key: \"toggleSelectAll\",\n    value: function toggleSelectAll() {\n      if (this.isSelectAll) this.clearSelection();else this.selectAll();\n    }\n  }, {\n    key: \"select\",\n    value: function select(key, e) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single') {\n        if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n      } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual')) this.toggleSelection(key);else this.replaceSelection(key);\n    }\n  }, {\n    key: \"isSelectionEqual\",\n    value: function isSelectionEqual(selection) {\n      if (selection === this.state.selectedKeys) return true;\n      var selectedKeys = this.selectedKeys;\n      if (selection.size !== selectedKeys.size) return false;\n\n      for (var _iterator7 = _createForOfIteratorHelperLoose(selection), _step7; !(_step7 = _iterator7()).done;) {\n        var key = _step7.value;\n        if (!selectedKeys.has(key)) return false;\n      }\n\n      for (var _iterator8 = _createForOfIteratorHelperLoose(selectedKeys), _step8; !(_step8 = _iterator8()).done;) {\n        var key2 = _step8.value;\n        if (!selection.has(key2)) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"canSelectItem\",\n    value: function canSelectItem(key) {\n      if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n      var item = this.collection.getItem(key);\n      if (!item || item.type === 'cell' && !this.allowsCellSelection) return false;\n      return true;\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled(key) {\n      return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n    }\n  }]);\n\n  return $d496c0a20b6e58ec$export$6c8a5aaad13c9852;\n}();\n\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState, $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"mappings":"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","names":["$e40ea825a81a3709$export$52baac22726c72bf","keys","anchorKey","currentKey","Set","$7af3f5b51489e0b5$var$equalSets","setA","setB","size","item","has","$7af3f5b51489e0b5$export$253fe78d46329472","props","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","selectionBehavior","selectionBehaviorProp","disabledBehavior","isFocusedRef","$Qsto2$useRef","$Qsto2$useState","setFocused","focusedKeyRef","childFocusStrategyRef","setFocusedKey","selectedKeysProp","$Qsto2$useMemo","$7af3f5b51489e0b5$var$convertSelection","selectedKeys","defaultSelectedKeys","$Qsto2$useControlledState","onSelectionChange","setSelectedKeys","disabledKeysProp","disabledKeys","setSelectionBehavior","lastSelectionBehavior","$Qsto2$useEffect","current","isFocused","f","focusedKey","childFocusStrategy","k","selection","defaultValue","$d496c0a20b6e58ec$export$6c8a5aaad13c9852","collection","state","options","ref","allowsCellSelection","_isSelectAll","key","getSelectAllKeys","getKey","canSelectItem","isEmpty","allKeys","every","first","getItem","index","last","toKey","replaceSelection","getKeyRange","delete","key1","add","from","to","fromItem","toItem","getKeyRangeInternal","type","push","getKeyAfter","parentKey","isSelected","addKeys","hasChildNodes","childNodes","getFirstKey","isSelectAll","clearSelection","selectAll","e","toggleSelection","pointerType","key2"],"sources":["packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DisabledBehavior, MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {Key, useEffect, useMemo, useRef, useState} from 'react';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean,\n  /** Whether `disabledKeys` applies to all interactions, or only selection. */\n  disabledBehavior?: DisabledBehavior\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents,\n    selectionBehavior: selectionBehaviorProp = 'toggle',\n    disabledBehavior = 'all'\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(selectionBehaviorProp);\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  // If the selectionBehavior prop changes, update the state as well.\n  let lastSelectionBehavior = useRef(selectionBehaviorProp);\n  useEffect(() => {\n    if (selectionBehaviorProp !== lastSelectionBehavior.current) {\n      setSelectionBehavior(selectionBehaviorProp);\n      lastSelectionBehavior.current = selectionBehaviorProp;\n    }\n  }, [selectionBehaviorProp]);\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp,\n    disabledBehavior\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    this.state.setFocusedKey(key, childFocusStrategy);\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledKeys.has(key) && this.state.disabledBehavior === 'all';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}