{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isHovered\", \"isFocused\", \"onKeyPress\"],\n    _excluded2 = [\"ariaLabel\", \"accessibilityLabel\", \"type\", \"isFullWidth\", \"isDisabled\", \"isReadOnly\", \"fontFamily\", \"fontWeight\", \"fontStyle\", \"placeholderTextColor\", \"selectionColor\", \"underlineColorAndroid\", \"InputLeftElement\", \"InputRightElement\", \"leftElement\", \"rightElement\", \"onFocus\", \"onBlur\", \"wrapperRef\", \"_stack\", \"_input\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useToken } from \"../../../hooks\";\nimport { useFormControl } from \"../../composites/FormControl\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from \"../../../theme/tools/utils\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { mergeRefs } from \"../../../utils\";\nimport { Stack } from \"../Stack\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { useResolvedFontFamily } from \"../../../hooks/useResolvedFontFamily\";\nvar StyledInput = makeStyledComponent(TextInput);\n\nvar Input = function Input(_ref2, ref) {\n  var isHoveredProp = _ref2.isHovered,\n      isFocusedProp = _ref2.isFocused,\n      _onKeyPress = _ref2.onKeyPress,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID\n  });\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isFocused = _React$useState2[0],\n      setIsFocused = _React$useState2[1];\n\n  var handleFocus = function handleFocus(focusState, callback) {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  props.focusOutlineColor = useToken('colors', props.focusOutlineColor);\n  props.invalidOutlineColor = useToken('colors', props.invalidOutlineColor);\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  var inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required\n  };\n\n  var _usePropsResolution = usePropsResolution('Input', _objectSpread(_objectSpread({}, inputThemeProps), props), {\n    isDisabled: inputThemeProps.isDisabled,\n    isHovered: isHoveredProp || isHovered,\n    isFocused: isFocusedProp || isFocused,\n    isInvalid: inputThemeProps.isInvalid,\n    isReadOnly: inputThemeProps.isReadOnly\n  }),\n      ariaLabel = _usePropsResolution.ariaLabel,\n      accessibilityLabel = _usePropsResolution.accessibilityLabel,\n      type = _usePropsResolution.type,\n      isFullWidth = _usePropsResolution.isFullWidth,\n      isDisabled = _usePropsResolution.isDisabled,\n      isReadOnly = _usePropsResolution.isReadOnly,\n      fontFamily = _usePropsResolution.fontFamily,\n      fontWeight = _usePropsResolution.fontWeight,\n      fontStyle = _usePropsResolution.fontStyle,\n      placeholderTextColor = _usePropsResolution.placeholderTextColor,\n      selectionColor = _usePropsResolution.selectionColor,\n      underlineColorAndroid = _usePropsResolution.underlineColorAndroid,\n      InputLeftElement = _usePropsResolution.InputLeftElement,\n      InputRightElement = _usePropsResolution.InputRightElement,\n      leftElement = _usePropsResolution.leftElement,\n      rightElement = _usePropsResolution.rightElement,\n      _onFocus = _usePropsResolution.onFocus,\n      _onBlur = _usePropsResolution.onBlur,\n      wrapperRef = _usePropsResolution.wrapperRef,\n      _stack = _usePropsResolution._stack,\n      _input = _usePropsResolution._input,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _extractInObject = extractInObject(resolvedProps, [].concat(_toConsumableArray(stylingProps.margin), _toConsumableArray(stylingProps.border), _toConsumableArray(stylingProps.layout), _toConsumableArray(stylingProps.flexbox), _toConsumableArray(stylingProps.position), _toConsumableArray(stylingProps.background), ['shadow', 'opacity'])),\n      _extractInObject2 = _slicedToArray(_extractInObject, 2),\n      layoutProps = _extractInObject2[0],\n      nonLayoutProps = _extractInObject2[1];\n\n  var resolvedFontFamily = useResolvedFontFamily({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : 'normal'\n  });\n  var resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  var resolvedSelectionColor = useToken('colors', selectionColor);\n  var resolvedUnderlineColorAndroid = useToken('colors', underlineColorAndroid);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Stack, _extends({}, _stack, layoutProps, {\n    ref: mergeRefs([_ref, wrapperRef]),\n    isFocused: isFocused\n  }), InputLeftElement || leftElement ? InputLeftElement || leftElement : null, React.createElement(StyledInput, _extends({}, inputProps, {\n    secureTextEntry: type === 'password',\n    accessible: true,\n    accessibilityLabel: ariaLabel || accessibilityLabel,\n    editable: isDisabled || isReadOnly ? false : true,\n    w: isFullWidth ? '100%' : undefined\n  }, nonLayoutProps, resolvedFontFamily, {\n    placeholderTextColor: resolvedPlaceholderTextColor,\n    selectionColor: resolvedSelectionColor,\n    underlineColorAndroid: resolvedUnderlineColorAndroid,\n    onKeyPress: function onKeyPress(e) {\n      e.persist();\n      _onKeyPress && _onKeyPress(e);\n    },\n    onFocus: function onFocus(e) {\n      handleFocus(true, _onFocus ? function () {\n        return _onFocus(e);\n      } : function () {});\n    },\n    onBlur: function onBlur(e) {\n      handleFocus(false, _onBlur ? function () {\n        return _onBlur(e);\n      } : function () {});\n    }\n  }, _input, {\n    ref: mergeRefs([ref, _ref, wrapperRef])\n  })), InputRightElement || rightElement ? InputRightElement || rightElement : null);\n};\n\nexport default memo(forwardRef(Input));","map":{"version":3,"mappings":"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","names":["React","memo","forwardRef","useToken","useFormControl","useHasResponsiveProps","useHover","extractInObject","stylingProps","usePropsResolution","mergeRefs","Stack","makeStyledComponent","useResolvedFontFamily","StyledInput","TextInput","Input","ref","isHoveredProp","isHovered","isFocusedProp","isFocused","onKeyPress","props","inputProps","isDisabled","isInvalid","isReadOnly","isRequired","nativeID","useState","setIsFocused","handleFocus","focusState","callback","focusOutlineColor","invalidOutlineColor","_ref","useRef","inputThemeProps","disabled","accessibilityInvalid","accessibilityReadOnly","required","ariaLabel","accessibilityLabel","type","isFullWidth","fontFamily","fontWeight","fontStyle","placeholderTextColor","selectionColor","underlineColorAndroid","InputLeftElement","InputRightElement","leftElement","rightElement","onFocus","onBlur","wrapperRef","_stack","_input","resolvedProps","margin","border","layout","flexbox","position","background","layoutProps","nonLayoutProps","resolvedFontFamily","resolvedPlaceholderTextColor","resolvedSelectionColor","resolvedUnderlineColorAndroid","secureTextEntry","accessible","editable","w","undefined","e","persist"],"sources":["Input.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IInputProps } from './types';\nimport { TextInput } from 'react-native';\nimport { useToken } from '../../../hooks';\nimport { useFormControl } from '../../composites/FormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useHover } from '@react-native-aria/interactions';\nimport { extractInObject, stylingProps } from '../../../theme/tools/utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { mergeRefs } from '../../../utils';\nimport { Stack } from '../Stack';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\n\nconst StyledInput = makeStyledComponent(TextInput);\n\nconst Input = (\n  {\n    isHovered: isHoveredProp,\n    isFocused: isFocusedProp,\n    onKeyPress,\n    ...props\n  }: IInputProps,\n  ref: any\n) => {\n  const inputProps = useFormControl({\n    isDisabled: props.isDisabled,\n    isInvalid: props.isInvalid,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    nativeID: props.nativeID,\n  });\n  const [isFocused, setIsFocused] = React.useState(false);\n  const handleFocus = (focusState: boolean, callback: any) => {\n    setIsFocused(focusState);\n    callback();\n  };\n\n  /**Converting into Hash Color Code */\n  //@ts-ignore\n  props.focusOutlineColor = useToken('colors', props.focusOutlineColor);\n  //@ts-ignore\n  props.invalidOutlineColor = useToken('colors', props.invalidOutlineColor);\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n\n  const inputThemeProps = {\n    isDisabled: inputProps.disabled,\n    isInvalid: inputProps.accessibilityInvalid,\n    isReadOnly: inputProps.accessibilityReadOnly,\n    isRequired: inputProps.required,\n  };\n\n  const {\n    ariaLabel,\n    accessibilityLabel,\n    type,\n    isFullWidth,\n    isDisabled,\n    isReadOnly,\n    fontFamily,\n    fontWeight,\n    fontStyle,\n    placeholderTextColor,\n    selectionColor,\n    underlineColorAndroid,\n    InputLeftElement,\n    InputRightElement,\n    leftElement,\n    rightElement,\n    onFocus,\n    onBlur,\n    wrapperRef,\n    _stack,\n    _input,\n\n    ...resolvedProps\n  } = usePropsResolution(\n    'Input',\n    {\n      ...inputThemeProps,\n      ...props,\n    },\n    {\n      isDisabled: inputThemeProps.isDisabled,\n      isHovered: isHoveredProp || isHovered,\n      isFocused: isFocusedProp || isFocused,\n      isInvalid: inputThemeProps.isInvalid,\n      isReadOnly: inputThemeProps.isReadOnly,\n    }\n  );\n\n  const [layoutProps, nonLayoutProps] = extractInObject(resolvedProps, [\n    ...stylingProps.margin,\n    ...stylingProps.border,\n    ...stylingProps.layout,\n    ...stylingProps.flexbox,\n    ...stylingProps.position,\n    ...stylingProps.background,\n    'shadow',\n    'opacity',\n  ]);\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? 400,\n    fontStyle: fontStyle ?? 'normal',\n  });\n  const resolvedPlaceholderTextColor = useToken('colors', placeholderTextColor);\n  const resolvedSelectionColor = useToken('colors', selectionColor);\n  const resolvedUnderlineColorAndroid = useToken(\n    'colors',\n    underlineColorAndroid\n  );\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Stack\n      {..._stack}\n      {...layoutProps}\n      ref={mergeRefs([_ref, wrapperRef])}\n      isFocused={isFocused}\n    >\n      {InputLeftElement || leftElement ? InputLeftElement || leftElement : null}\n      <StyledInput\n        {...inputProps}\n        secureTextEntry={type === 'password'}\n        accessible\n        accessibilityLabel={ariaLabel || accessibilityLabel}\n        editable={isDisabled || isReadOnly ? false : true}\n        w={isFullWidth ? '100%' : undefined}\n        {...nonLayoutProps}\n        {...resolvedFontFamily}\n        placeholderTextColor={resolvedPlaceholderTextColor}\n        selectionColor={resolvedSelectionColor}\n        underlineColorAndroid={resolvedUnderlineColorAndroid}\n        onKeyPress={(e: any) => {\n          e.persist();\n          onKeyPress && onKeyPress(e);\n        }}\n        onFocus={(e: any) => {\n          handleFocus(true, onFocus ? () => onFocus(e) : () => {});\n        }}\n        onBlur={(e: any) => {\n          handleFocus(false, onBlur ? () => onBlur(e) : () => {});\n        }}\n        {..._input}\n        ref={mergeRefs([ref, _ref, wrapperRef])}\n      />\n      {InputRightElement || rightElement\n        ? InputRightElement || rightElement\n        : null}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(Input));\n"]},"metadata":{},"sourceType":"module"}