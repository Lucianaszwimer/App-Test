{"ast":null,"code":"import { MessageDictionary, MessageFormatter } from '@internationalized/message';\nimport { useCallback, useMemo } from 'react';\nimport { useLocale } from \"../\";\nvar cache = new WeakMap();\n\nfunction getCachedDictionary(strings) {\n  var dictionary = cache.get(strings);\n\n  if (!dictionary) {\n    dictionary = new MessageDictionary(strings);\n    cache.set(strings, dictionary);\n  }\n\n  return dictionary;\n}\n\nexport function useMessageFormatter(strings) {\n  var _useLocale = useLocale(),\n      locale = _useLocale.locale;\n\n  var dictionary = useMemo(function () {\n    return getCachedDictionary(strings);\n  }, [strings]);\n  var formatter = useMemo(function () {\n    return new MessageFormatter(locale, dictionary);\n  }, [locale, dictionary]);\n  return useCallback(function (key, variables) {\n    return formatter.format(key, variables);\n  }, [formatter]);\n}","map":{"version":3,"names":["MessageDictionary","MessageFormatter","useCallback","useMemo","useLocale","cache","WeakMap","getCachedDictionary","strings","dictionary","get","set","useMessageFormatter","locale","formatter","key","variables","format"],"sources":["C:/Users/devandroid/Desktop/App-Test/node_modules/@react-aria/i18n/dist/useMessageFormatter.module.js"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport { MessageDictionary, MessageFormatter } from '@internationalized/message';\nimport { useCallback, useMemo } from 'react';\nimport { useLocale } from '../';\nconst cache = new WeakMap();\n\nfunction getCachedDictionary(strings) {\n  let dictionary = cache.get(strings);\n\n  if (!dictionary) {\n    dictionary = new MessageDictionary(strings);\n    cache.set(strings, dictionary);\n  }\n\n  return dictionary;\n}\n/**\n * Handles formatting ICU Message strings to create localized strings for the current locale.\n * Automatically updates when the locale changes, and handles caching of messages for performance.\n * @param strings - A mapping of languages to strings by key.\n * @deprecated - use useLocalizedStringFormatter instead.\n */\n\n\nexport function useMessageFormatter(strings) {\n  let {\n    locale\n  } = useLocale();\n  let dictionary = useMemo(() => getCachedDictionary(strings), [strings]);\n  let formatter = useMemo(() => new MessageFormatter(locale, dictionary), [locale, dictionary]);\n  return useCallback((key, variables) => formatter.format(key, variables), [formatter]);\n}\n"],"mappings":"AAWA,SAASA,iBAAT,EAA4BC,gBAA5B,QAAoD,4BAApD;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,SAAT;AACA,IAAMC,KAAK,GAAG,IAAIC,OAAJ,EAAd;;AAEA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsC;EACpC,IAAIC,UAAU,GAAGJ,KAAK,CAACK,GAAN,CAAUF,OAAV,CAAjB;;EAEA,IAAI,CAACC,UAAL,EAAiB;IACfA,UAAU,GAAG,IAAIT,iBAAJ,CAAsBQ,OAAtB,CAAb;IACAH,KAAK,CAACM,GAAN,CAAUH,OAAV,EAAmBC,UAAnB;EACD;;EAED,OAAOA,UAAP;AACD;;AASD,OAAO,SAASG,mBAAT,CAA6BJ,OAA7B,EAAsC;EAC3C,iBAEIJ,SAAS,EAFb;EAAA,IACES,MADF,cACEA,MADF;;EAGA,IAAIJ,UAAU,GAAGN,OAAO,CAAC;IAAA,OAAMI,mBAAmB,CAACC,OAAD,CAAzB;EAAA,CAAD,EAAqC,CAACA,OAAD,CAArC,CAAxB;EACA,IAAIM,SAAS,GAAGX,OAAO,CAAC;IAAA,OAAM,IAAIF,gBAAJ,CAAqBY,MAArB,EAA6BJ,UAA7B,CAAN;EAAA,CAAD,EAAiD,CAACI,MAAD,EAASJ,UAAT,CAAjD,CAAvB;EACA,OAAOP,WAAW,CAAC,UAACa,GAAD,EAAMC,SAAN;IAAA,OAAoBF,SAAS,CAACG,MAAV,CAAiBF,GAAjB,EAAsBC,SAAtB,CAApB;EAAA,CAAD,EAAuD,CAACF,SAAD,CAAvD,CAAlB;AACD"},"metadata":{},"sourceType":"module"}