{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"visible\", \"onTransitionComplete\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { ExitAnimationContext } from \"../../primitives/Overlay/ExitAnimationContext\";\nimport { Transition } from \"./Transition\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar PresenceTransition = function PresenceTransition(_ref, ref) {\n  var _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      _onTransitionComplete = _ref.onTransitionComplete,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(ExitAnimationContext),\n      setExited = _React$useContext.setExited;\n\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n\n  return React.createElement(Transition, _extends({\n    visible: visible,\n    onTransitionComplete: function onTransitionComplete(state) {\n      if (state === 'exited') {\n        setExited(true);\n      } else {\n        setExited(false);\n      }\n\n      _onTransitionComplete && _onTransitionComplete(state);\n    }\n  }, rest, {\n    ref: ref\n  }));\n};\n\nexport default memo(forwardRef(PresenceTransition));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,oBAAT;AACA,SAASC,UAAT;AAEA,SAASC,qBAAT;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAEzBC,GAFyB,EAGtB;EAAA,wBAFDC,OAEC;EAAA,IAFDA,OAEC,6BAFS,KAET;EAAA,IAFgBC,qBAEhB,QAFgBA,oBAEhB;EAAA,IAFyCC,IAEzC;;EAGH,wBAAsBV,KAAK,CAACW,UAANX,CAAiBG,oBAAjBH,CAAtB;EAAA,IAAQY,SAAR,qBAAQA,SAAR;;EAEA,IAAIP,qBAAqB,CAACK,IAAD,CAAzB,EAAiC;IAC/B,OAAO,IAAP;EACD;;EAED,OACEV,oBAACI,UAAD;IACEI,OAAO,EAAEA,OADX;IAEEC,oBAAoB,EAAGI,mCAAD,EAAW;MAC/B,IAAIA,KAAK,KAAK,QAAd,EAAwB;QACtBD,SAAS,CAAC,IAAD,CAATA;MADF,OAEO;QACLA,SAAS,CAAC,KAAD,CAATA;MACD;;MACDH,qBAAoB,IAAIA,qBAAoB,CAACI,KAAD,CAA5CJ;IACD;EATH,GAUMC,IAVN;IAWEH,GAAG,EAAEA;EAXP,GADF;AAZF;;AA6BA,eAAeN,IAAI,CAACC,UAAU,CAACI,kBAAD,CAAX,CAAnB","names":["React","memo","forwardRef","ExitAnimationContext","Transition","useHasResponsiveProps","PresenceTransition","ref","visible","onTransitionComplete","rest","useContext","setExited","state"],"sources":["PresenceTransition.tsx"],"sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ExitAnimationContext } from '../../primitives/Overlay/ExitAnimationContext';\nimport { Transition } from './Transition';\nimport type { IPresenceTransitionProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PresenceTransition = (\n  { visible = false, onTransitionComplete, ...rest }: IPresenceTransitionProps,\n  ref: any\n) => {\n  // const [animationExited, setAnimationExited] = React.useState(!visible);\n\n  const { setExited } = React.useContext(ExitAnimationContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n\n  return (\n    <Transition\n      visible={visible}\n      onTransitionComplete={(state) => {\n        if (state === 'exited') {\n          setExited(true);\n        } else {\n          setExited(false);\n        }\n        onTransitionComplete && onTransitionComplete(state);\n      }}\n      {...rest}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(PresenceTransition));\n"]},"metadata":{},"sourceType":"module"}