{"ast":null,"code":"import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var useMenuTrigger = function useMenuTrigger(_ref) {\n  var handleOpen = _ref.handleOpen,\n      isOpen = _ref.isOpen;\n  var menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': function onKeyDownCapture(event) {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\nexport var useMenu = function useMenu() {\n  var focusManager = useFocusManager();\n\n  var onKeyDown = function onKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n\n  return {\n    onKeyDown: onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\nexport var useMenuItem = function useMenuItem(_ref2) {\n  var textValue = _ref2.textValue,\n      ref = _ref2.ref;\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: function onHoverIn() {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\nexport var useMenuOptionItem = function useMenuOptionItem(_ref3) {\n  var isChecked = _ref3.isChecked,\n      type = _ref3.type;\n  return {\n    accessibilityRole: 'menuitem' + (Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\nvar ITEM_ATTR = 'data-nativebase-menu-item';\n\nvar getValue = function getValue(element) {\n  var _element$getAttribute;\n\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) !== null && _element$getAttribute !== void 0 ? _element$getAttribute : '';\n};\n\nexport var useMenuTypeahead = function useMenuTypeahead(props) {\n  return {\n    onKeyDown: function onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        var container = event.currentTarget;\n        var values = Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR, \"]\"))).map(getValue);\n        var searchKey = event.key;\n        var foundValue = values.find(function (value) {\n          return value.toLowerCase().startsWith(searchKey);\n        });\n        var newItem = container.querySelector(\"[\".concat(ITEM_ATTR, \"=\\\"\").concat(foundValue, \"\\\"]\"));\n\n        if (newItem) {\n          setTimeout(function () {\n            return newItem.focus();\n          });\n        }\n      }\n    }\n  };\n};","map":{"version":3,"mappings":"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","names":["useFocusManager","useId","useMenuTrigger","handleOpen","isOpen","menuTriggerId","event","includes","key","preventDefault","undefined","useMenu","focusManager","onKeyDown","e","focusNext","wrap","focusPrevious","accessibilityRole","useMenuItem","textValue","ref","dataSet","nativebaseMenuItem","onHoverIn","current","Platform","OS","focus","useMenuOptionItem","isChecked","type","accessibilityState","checked","accessibilityChecked","ITEM_ATTR","getValue","element","getAttribute","useMenuTypeahead","props","length","ctrlKey","altKey","metaKey","container","currentTarget","values","Array","from","querySelectorAll","map","searchKey","foundValue","find","value","toLowerCase","startsWith","newItem","querySelector","setTimeout"],"sources":["useMenu.tsx"],"sourcesContent":["import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport { AccessibilityRole, Platform } from 'react-native';\n\ntype IMenuTriggerProps = {\n  handleOpen: () => void;\n  isOpen: boolean;\n};\n\nexport const useMenuTrigger = ({ handleOpen, isOpen }: IMenuTriggerProps) => {\n  const menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': (event: KeyboardEvent) => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId,\n  };\n};\n\nexport const useMenu = () => {\n  const focusManager = useFocusManager();\n  const onKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowDown': {\n        e.preventDefault();\n        focusManager.focusNext({ wrap: true });\n        break;\n      }\n      case 'ArrowUp': {\n        e.preventDefault();\n        focusManager.focusPrevious({ wrap: true });\n        break;\n      }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu' as AccessibilityRole,\n  };\n};\n\nexport const useMenuItem = ({\n  textValue,\n  ref,\n}: {\n  textValue: string;\n  ref: any;\n}) => {\n  return {\n    accessibilityRole: 'menuitem' as AccessibilityRole,\n    dataSet: {\n      nativebaseMenuItem: textValue,\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    },\n  };\n};\n\nexport const useMenuOptionItem = ({\n  isChecked,\n  type,\n}: {\n  isChecked: boolean;\n  type: 'checkbox' | 'radio';\n}) => {\n  return {\n    accessibilityRole: ('menuitem' +\n      (Platform.OS === 'web' ? type : '')) as AccessibilityRole,\n    accessibilityState: {\n      checked: isChecked,\n    },\n    accessibilityChecked: isChecked,\n  };\n};\n\nconst ITEM_ATTR = 'data-nativebase-menu-item';\nconst getValue = (element: Element) => element.getAttribute(ITEM_ATTR) ?? '';\n\nexport const useMenuTypeahead = (props: any): any => {\n  return {\n    onKeyDown(event: KeyboardEvent) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (\n        event.key.length === 1 &&\n        !(event.ctrlKey || event.altKey || event.metaKey)\n      ) {\n        const container = event.currentTarget as HTMLElement;\n        const values = Array.from(\n          container.querySelectorAll(`[${ITEM_ATTR}]`)\n        ).map(getValue);\n\n        const searchKey = event.key;\n\n        const foundValue = values.find((value) =>\n          value.toLowerCase().startsWith(searchKey)\n        );\n        const newItem = container.querySelector(\n          `[${ITEM_ATTR}=\"${foundValue}\"]`\n        );\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => (newItem as HTMLElement).focus());\n        }\n      }\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}