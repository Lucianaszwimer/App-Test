{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isDisabled\", \"onPress\", \"onPressStart\", \"onPressEnd\", \"onPressChange\"];\nimport { usePress } from '@react-native-aria/interactions';\nimport { mergeProps } from '@react-aria/utils';\nexport function useButton(props) {\n  var isDisabled = props.isDisabled,\n      onPress = props.onPress,\n      onPressStart = props.onPressStart,\n      onPressEnd = props.onPressEnd,\n      onPressChange = props.onPressChange,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var _usePress = usePress({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    isDisabled: isDisabled\n  }),\n      pressProps = _usePress.pressProps,\n      isPressed = _usePress.isPressed;\n\n  var mergedProps = mergeProps(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled\n  });\n  return {\n    isPressed: isPressed,\n    buttonProps: mergedProps\n  };\n}","map":{"version":3,"mappings":";;AACA,SAAsBA,QAAtB,QAAsC,iCAAtC;AAEA,SAASC,UAAT,QAA2B,mBAA3B;AAkBA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAAyD;EAC9D,IACEC,UADF,GAOID,KAPJ,CACEC,UADF;EAAA,IAEEC,OAFF,GAOIF,KAPJ,CAEEE,OAFF;EAAA,IAGEC,YAHF,GAOIH,KAPJ,CAGEG,YAHF;EAAA,IAIEC,UAJF,GAOIJ,KAPJ,CAIEI,UAJF;EAAA,IAKEC,aALF,GAOIL,KAPJ,CAKEK,aALF;EAAA,IAMKC,IANL,4BAOIN,KAPJ;;EASA,gBAAgCH,QAAQ,CAAC;IACvCM,YADuC,EACvCA,YADuC;IAEvCC,UAFuC,EAEvCA,UAFuC;IAGvCC,aAHuC,EAGvCA,aAHuC;IAIvCH,OAJuC,EAIvCA,OAJuC;IAKvCD;EALuC,CAAD,CAAxC;EAAA,IAAMM,UAAN,aAAMA,UAAN;EAAA,IAAkBC,SAAlB,aAAkBA,SAAlB;;EAQA,IAAMC,WAAW,GAAGX,UAAU,CAACS,UAAD,EAAaD,IAAb,EAAmB;IAC/CI,kBAAkB,EAAE;MAClBC,QAAQ,EAAEV;IADQ,CAD2B;IAI/CW,iBAAiB,EAAE,QAJ4B;IAK/CD,QAAQ,EAAEV;EALqC,CAAnB,CAA9B;EAQA,OAAO;IACLO,SADK,EACLA,SADK;IAELK,WAAW,EAAEJ;EAFR,CAAP;AAID","names":["usePress","mergeProps","useButton","props","isDisabled","onPress","onPressStart","onPressEnd","onPressChange","rest","pressProps","isPressed","mergedProps","accessibilityState","disabled","accessibilityRole","buttonProps"],"sources":["useButton.ts"],"sourcesContent":["import { ReactNode } from 'react';\nimport { PressEvents, usePress } from '@react-native-aria/interactions';\nimport { AccessibilityProps, PressableProps } from 'react-native';\nimport { mergeProps } from '@react-aria/utils';\n\ninterface ButtonProps extends PressEvents {\n  /** Whether the button is disabled. */\n  isDisabled?: boolean;\n  /** The content to display in the button. */\n  children?: ReactNode;\n}\n\nexport interface RNAriaButtonProps extends AccessibilityProps, ButtonProps {}\n\nexport interface ButtonAria {\n  /** Props for the button element. */\n  buttonProps: PressableProps;\n  /** Whether the button is currently pressed. */\n  isPressed: boolean;\n}\n\nexport function useButton(props: RNAriaButtonProps): ButtonAria {\n  let {\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    ...rest\n  } = props;\n\n  let { pressProps, isPressed } = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    isDisabled,\n  });\n\n  const mergedProps = mergeProps(pressProps, rest, {\n    accessibilityState: {\n      disabled: isDisabled,\n    },\n    accessibilityRole: 'button',\n    disabled: isDisabled,\n  });\n\n  return {\n    isPressed,\n    buttonProps: mergedProps,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}