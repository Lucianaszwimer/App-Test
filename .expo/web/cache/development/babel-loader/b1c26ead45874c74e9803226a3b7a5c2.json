{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { filterDOMProps as $frWMC$filterDOMProps, useId as $frWMC$useId, mergeProps as $frWMC$mergeProps, useSlotId as $frWMC$useSlotId, isMac as $frWMC$isMac, isWebKit as $frWMC$isWebKit } from \"@react-aria/utils\";\nimport { useFocusWithin as $frWMC$useFocusWithin, useHover as $frWMC$useHover, isFocusVisible as $frWMC$isFocusVisible } from \"@react-aria/interactions\";\nimport { useLabel as $frWMC$useLabel } from \"@react-aria/label\";\nimport { useSelectableList as $frWMC$useSelectableList, useSelectableItem as $frWMC$useSelectableItem } from \"@react-aria/selection\";\nimport { getItemCount as $frWMC$getItemCount } from \"@react-stately/collections\";\nvar $b1f0cad8af73213b$export$3585ede4d035bf14 = new WeakMap();\n\nfunction $b1f0cad8af73213b$var$normalizeKey(key) {\n  if (typeof key === 'string') return key.replace(/\\s*/g, '');\n  return '' + key;\n}\n\nfunction $b1f0cad8af73213b$export$9145995848b05025(state, itemKey) {\n  var data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n  if (!data) throw new Error('Unknown list');\n  return data.id + \"-option-\" + $b1f0cad8af73213b$var$normalizeKey(itemKey);\n}\n\nfunction $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {\n  var domProps = $frWMC$filterDOMProps(props, {\n    labelable: true\n  });\n\n  var _$frWMC$useSelectable = $frWMC$useSelectableList(_objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  })),\n      listProps = _$frWMC$useSelectable.listProps;\n\n  var _$frWMC$useFocusWithi = $frWMC$useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  }),\n      focusWithinProps = _$frWMC$useFocusWithi.focusWithinProps;\n\n  var id = $frWMC$useId(props.id);\n  $b1f0cad8af73213b$export$3585ede4d035bf14.set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  var _$frWMC$useLabel = $frWMC$useLabel(_objectSpread(_objectSpread({}, props), {}, {\n    id: id,\n    labelElementType: 'span'\n  })),\n      labelProps = _$frWMC$useLabel.labelProps,\n      fieldProps = _$frWMC$useLabel.fieldProps;\n\n  return {\n    labelProps: labelProps,\n    listBoxProps: $frWMC$mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, _objectSpread({\n      role: 'listbox'\n    }, $frWMC$mergeProps(fieldProps, listProps)))\n  };\n}\n\nfunction $293f70390ea03370$export$497855f14858aa34(props, state, ref) {\n  var key = props.key;\n  var data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);\n\n  var _isDisabled;\n\n  var isDisabled = (_isDisabled = props.isDisabled) !== null && _isDisabled !== void 0 ? _isDisabled : state.disabledKeys.has(key);\n\n  var _isSelected;\n\n  var isSelected = (_isSelected = props.isSelected) !== null && _isSelected !== void 0 ? _isSelected : state.selectionManager.isSelected(key);\n  var isFocused = state.selectionManager.focusedKey === key;\n\n  var _shouldSelectOnPressUp;\n\n  var shouldSelectOnPressUp = (_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _shouldSelectOnPressUp !== void 0 ? _shouldSelectOnPressUp : data.shouldSelectOnPressUp;\n\n  var _shouldFocusOnHover;\n\n  var shouldFocusOnHover = (_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _shouldFocusOnHover !== void 0 ? _shouldFocusOnHover : data.shouldFocusOnHover;\n\n  var _shouldUseVirtualFocus;\n\n  var shouldUseVirtualFocus = (_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _shouldUseVirtualFocus !== void 0 ? _shouldUseVirtualFocus : data.shouldUseVirtualFocus;\n\n  var _isVirtualized;\n\n  var isVirtualized = (_isVirtualized = props.isVirtualized) !== null && _isVirtualized !== void 0 ? _isVirtualized : data.isVirtualized;\n  var labelId = $frWMC$useSlotId();\n  var descriptionId = $frWMC$useSlotId();\n  var optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  if (!($frWMC$isMac() && $frWMC$isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = $frWMC$getItemCount(state.collection);\n  }\n\n  var _$frWMC$useSelectable2 = $frWMC$useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    isDisabled: isDisabled\n  }),\n      itemProps = _$frWMC$useSelectable2.itemProps,\n      isPressed = _$frWMC$useSelectable2.isPressed;\n\n  var _$frWMC$useHover = $frWMC$useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart: function onHoverStart() {\n      if (!$frWMC$isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  }),\n      hoverProps = _$frWMC$useHover.hoverProps;\n\n  return {\n    optionProps: _objectSpread(_objectSpread(_objectSpread({}, optionProps), $frWMC$mergeProps(itemProps, hoverProps)), {}, {\n      id: $b1f0cad8af73213b$export$9145995848b05025(state, key)\n    }),\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed\n  };\n}\n\nfunction $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props) {\n  var heading = props.heading,\n      ariaLabel = props['aria-label'];\n  var headingId = $frWMC$useId();\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n\nexport { $c132121280ec012d$export$50eacbbf140a3141 as useListBox, $293f70390ea03370$export$497855f14858aa34 as useOption, $af383d3bef1cfdc9$export$c3f9f39876e4bc7 as useListBoxSection, $b1f0cad8af73213b$export$3585ede4d035bf14 as listData, $b1f0cad8af73213b$export$9145995848b05025 as getItemId };","map":{"version":3,"mappings":"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","names":["$b1f0cad8af73213b$export$3585ede4d035bf14","WeakMap","$b1f0cad8af73213b$var$normalizeKey","key","replace","$b1f0cad8af73213b$export$9145995848b05025","state","itemKey","data","get","Error","id","$c132121280ec012d$export$50eacbbf140a3141","props","ref","domProps","$frWMC$filterDOMProps","labelable","$frWMC$useSelectableList","selectionManager","collection","disabledKeys","listProps","$frWMC$useFocusWithin","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","focusWithinProps","$frWMC$useId","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","$frWMC$useLabel","labelElementType","labelProps","fieldProps","listBoxProps","$frWMC$mergeProps","selectionMode","role","$293f70390ea03370$export$497855f14858aa34","_isDisabled","isDisabled","has","_isSelected","isSelected","isFocused","focusedKey","_shouldSelectOnPressUp","_shouldFocusOnHover","_shouldUseVirtualFocus","_isVirtualized","labelId","$frWMC$useSlotId","descriptionId","optionProps","undefined","$frWMC$isMac","$frWMC$isWebKit","getItem","index","$frWMC$getItemCount","$frWMC$useSelectableItem","allowsDifferentPressOrigin","itemProps","isPressed","$frWMC$useHover","onHoverStart","$frWMC$isFocusVisible","setFocused","setFocusedKey","hoverProps","descriptionProps","$af383d3bef1cfdc9$export$c3f9f39876e4bc7","heading","ariaLabel","headingId","headingProps","groupProps"],"sources":["packages/@react-aria/listbox/src/utils.ts","packages/@react-aria/listbox/src/useListBox.ts","packages/@react-aria/listbox/src/useOption.ts","packages/@react-aria/listbox/src/useListBoxSection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\nimport {ListState} from '@react-stately/list';\n\ninterface ListData {\n  id: string,\n  shouldSelectOnPressUp?: boolean,\n  shouldFocusOnHover?: boolean,\n  shouldUseVirtualFocus?: boolean,\n  isVirtualized?: boolean\n}\n\nexport const listData = new WeakMap<ListState<unknown>, ListData>();\n\nfunction normalizeKey(key: Key): string {\n  if (typeof key === 'string') {\n    return key.replace(/\\s*/g, '');\n  }\n\n  return '' + key;\n}\n\nexport function getItemId<T>(state: ListState<T>, itemKey: Key): string {\n  let data = listData.get(state);\n\n  if (!data) {\n    throw new Error('Unknown list');\n  }\n\n  return `${data.id}-option-${normalizeKey(itemKey)}`;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaListBoxProps} from '@react-types/listbox';\nimport {DOMAttributes, KeyboardDelegate} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {listData} from './utils';\nimport {ListState} from '@react-stately/list';\nimport {ReactNode, RefObject} from 'react';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useId} from '@react-aria/utils';\nimport {useLabel} from '@react-aria/label';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface ListBoxAria {\n  /** Props for the listbox element. */\n  listBoxProps: DOMAttributes,\n  /** Props for the listbox's visual label element (if any). */\n  labelProps: DOMAttributes\n}\n\nexport interface AriaListBoxOptions<T> extends Omit<AriaListBoxProps<T>, 'children'> {\n  /** Whether the listbox uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n\n  /**\n   * Whether the listbox items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean,\n\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n\n  /** Whether options should be focused when the user hovers over them. */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * An optional visual label for the listbox.\n   */\n  label?: ReactNode\n}\n\n/**\n * Provides the behavior and accessibility implementation for a listbox component.\n * A listbox displays a list of options and allows a user to select one or more of them.\n * @param props - Props for the listbox.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useListBox<T>(props: AriaListBoxOptions<T>, state: ListState<T>, ref: RefObject<HTMLElement>): ListBoxAria {\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys\n  });\n\n  let {focusWithinProps} = useFocusWithin({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  // Share list id and some props with child options.\n  let id = useId(props.id);\n  listData.set(state, {\n    id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized\n  });\n\n  let {labelProps, fieldProps} = useLabel({\n    ...props,\n    id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: 'span'\n  });\n\n  return {\n    labelProps,\n    listBoxProps: mergeProps(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {\n      'aria-multiselectable': 'true'\n    } : {}, {\n      role: 'listbox',\n      ...mergeProps(fieldProps, listProps)\n    })\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {isMac, isWebKit, mergeProps, useSlotId} from '@react-aria/utils';\nimport {Key, RefObject} from 'react';\nimport {ListState} from '@react-stately/list';\nimport {useSelectableItem} from '@react-aria/selection';\n\nexport interface OptionAria {\n  /** Props for the option element. */\n  optionProps: DOMAttributes,\n\n  /** Props for the main text element inside the option. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n  /** Whether the option is currently selected. */\n  isSelected: boolean,\n  /** Whether the option is currently in a pressed state. */\n  isPressed: boolean,\n  /** Whether the option is disabled. */\n  isDisabled: boolean\n}\n\nexport interface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<FocusableElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.disabledKeys.has(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let isFocused = state.selectionManager.focusedKey === key;\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  if (isVirtualized) {\n    optionProps['aria-posinset'] = state.collection.getItem(key).index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let {itemProps, isPressed} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(itemProps, hoverProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isSelected,\n    isDisabled,\n    isPressed\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {ReactNode} from 'react';\nimport {useId} from '@react-aria/utils';\n\nexport interface AriaListBoxSectionProps {\n  /** The heading for the section. */\n  heading?: ReactNode,\n  /** An accessibility label for the section. Required if `heading` is not present. */\n  'aria-label'?: string\n}\n\nexport interface ListBoxSectionAria {\n  /** Props for the wrapper list item. */\n  itemProps: DOMAttributes,\n\n  /** Props for the heading element, if any. */\n  headingProps: DOMAttributes,\n\n  /** Props for the group element. */\n  groupProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a section in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the section.\n */\nexport function useListBoxSection(props: AriaListBoxSectionProps): ListBoxSectionAria {\n  let {heading, 'aria-label': ariaLabel} = props;\n  let headingId = useId();\n\n  return {\n    itemProps: {\n      role: 'presentation'\n    },\n    headingProps: heading ? {\n      // Techincally, listbox cannot contain headings according to ARIA.\n      // We hide the heading from assistive technology, and only use it\n      // as a label for the nested group.\n      id: headingId,\n      'aria-hidden': true\n    } : {},\n    groupProps: {\n      role: 'group',\n      'aria-label': ariaLabel,\n      'aria-labelledby': heading ? headingId : undefined\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}