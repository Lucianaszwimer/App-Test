{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"fieldIndex\", \"defaultValue\"],\n    _excluded2 = [\"handleChange\", \"value\", \"setRefList\", \"defaultValue\", \"handleMultiValueChange\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { Input } from \"../../primitives/Input\";\nimport { PinInputContext } from \"./Context\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar PinInputFiled = function PinInputFiled(_ref, ref) {\n  var _ref$fieldIndex = _ref.fieldIndex,\n      fieldIndex = _ref$fieldIndex === void 0 ? 0 : _ref$fieldIndex,\n      pDefaultValue = _ref.defaultValue,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(PinInputContext),\n      handleChange = _React$useContext.handleChange,\n      cValue = _React$useContext.value,\n      setRefList = _React$useContext.setRefList,\n      cDefaultValue = _React$useContext.defaultValue,\n      handleMultiValueChange = _React$useContext.handleMultiValueChange,\n      context = _objectWithoutProperties(_React$useContext, _excluded2);\n\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  var defaultValue = pDefaultValue || cDefaultValue;\n  var value = cValue && cValue[fieldIndex];\n\n  var keyPressHandler = function keyPressHandler(event) {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n\n  var textChangeHandler = function textChangeHandler(value) {\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n\n  var myRef = React.useRef(null);\n  React.useEffect(function () {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Input, _extends({\n    ref: mergeRefs([myRef, ref])\n  }, context, props, {\n    onKeyPress: function onKeyPress(event) {\n      return keyPressHandler(event);\n    },\n    onChangeText: function onChangeText(value) {\n      return textChangeHandler(value);\n    },\n    keyboardType: \"numeric\",\n    defaultValue: defaultValue,\n    value: value\n  }));\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT;AAEA,SAASC,eAAT;;AAEA,SAASC,SAAT;AACA,SAASC,qBAAT;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAMpBC,GANoB,EAOjB;EAAA,2BALDC,UAKC;EAAA,IALDA,UAKC,gCALY,CAKZ;EAAA,IAJaC,aAIb,QAJDC,YAIC;EAAA,IAHEC,KAGF;;EACH,wBAOsBV,KAAK,CAACW,UAANX,CAAiBE,eAAjBF,CAPtB;EAAA,IACEY,YADF,qBACEA,YADF;EAAA,IAESC,MAFT,qBAEEC,KAFF;EAAA,IAGEC,UAHF,qBAGEA,UAHF;EAAA,IAIgBC,aAJhB,qBAIEP,YAJF;EAAA,IAKEQ,sBALF,qBAKEA,sBALF;EAAA,IAMKC,OANL;;EAQAF,aAAa,GAAGA,aAAa,IAAIA,aAAa,CAACT,UAAD,CAA9CS;EACA,IAAIP,YAAY,GAAGD,aAAa,IAAIQ,aAApC;EACA,IAAIF,KAAK,GAAGD,MAAM,IAAIA,MAAM,CAACN,UAAD,CAA5B;;EAEA,IAAMY,eAAe,GAAIC,SAAnBD,eAAmBC,MAAD,EAAgB;IACtC,IAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;MACzB,IAAID,KAAK,CAACG,WAANH,CAAkBI,GAAlBJ,IAAyB,CAAzBA,IAA8BA,KAAK,CAACG,WAANH,CAAkBI,GAAlBJ,IAAyB,CAA3D,EAA8D;QAC5DR,YAAY,IAAIA,YAAY,CAACQ,KAAK,CAACG,WAANH,CAAkBI,GAAnB,EAAwBjB,UAAxB,CAA5BK;MADF,OAEO,IAAIQ,KAAK,CAACG,WAANH,CAAkBI,GAAlBJ,KAA0B,WAA9B,EAA2C;QAChDR,YAAY,IAAIA,YAAY,CAAC,EAAD,EAAKL,UAAL,CAA5BK;MACD;IACF;EAPH;;EASA,IAAMa,iBAAiB,GAAIX,SAArBW,iBAAqBX,MAAD,EAAgB;IAExCG,sBAAsB,IAAIA,sBAAsB,CAACH,KAAD,EAAQP,UAAR,CAAhDU;EAFF;;EAIA,IAAMS,KAAK,GAAG1B,KAAK,CAAC2B,MAAN3B,CAAa,IAAbA,CAAd;EACAA,KAAK,CAAC4B,SAAN5B,CAAgB,YAAM;IACpBe,UAAU,IAAIA,UAAU,CAACW,KAAD,EAAQnB,UAAR,CAAxBQ;EADF,GAEG,CAACW,KAAD,EAAQnB,UAAR,EAAoBQ,UAApB,CAFHf;;EAKA,IAAII,qBAAqB,CAACM,KAAD,CAAzB,EAAkC;IAChC,OAAO,IAAP;EACD;;EACD,OACEV,oBAACC,KAAD;IAEEK,GAAG,EAAEH,SAAS,CAAC,CAACuB,KAAD,EAAQpB,GAAR,CAAD;EAFhB,GAGMY,OAHN,EAIMR,KAJN;IAKEmB,UAAU,EAAGT,yBAAD;MAAA,OAAWD,eAAe,CAACC,KAAD,CAA1B;IAAA,CALd;IAMEU,YAAY,EAAGhB,2BAAD;MAAA,OAAWW,iBAAiB,CAACX,KAAD,CAA5B;IAAA,CANhB;IAOEiB,YAAY,EAAC,SAPf;IAQEtB,YAAY,EAAEA,YARhB;IASEK,KAAK,EAAEA;EATT,GADF;AA1CF;;AAyDA,eAAed,KAAK,CAACgC,IAANhC,CAAWA,KAAK,CAACiC,UAANjC,CAAiBK,aAAjBL,CAAXA,CAAf","names":["React","Input","PinInputContext","mergeRefs","useHasResponsiveProps","PinInputFiled","ref","fieldIndex","pDefaultValue","defaultValue","props","useContext","handleChange","cValue","value","setRefList","cDefaultValue","handleMultiValueChange","context","keyPressHandler","event","Platform","OS","nativeEvent","key","textChangeHandler","myRef","useRef","useEffect","onKeyPress","onChangeText","keyboardType","memo","forwardRef"],"sources":["PinInputField.tsx"],"sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { IPinInputFieldProps, IPinInputContext } from './types';\nimport { PinInputContext } from './Context';\nimport { Platform } from 'react-native';\nimport { mergeRefs } from '../../../utils';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInputFiled = (\n  {\n    fieldIndex = 0,\n    defaultValue: pDefaultValue,\n    ...props\n  }: IPinInputFieldProps,\n  ref?: any\n) => {\n  let {\n    handleChange,\n    value: cValue,\n    setRefList,\n    defaultValue: cDefaultValue,\n    handleMultiValueChange,\n    ...context\n  }: IPinInputContext = React.useContext(PinInputContext);\n  cDefaultValue = cDefaultValue && cDefaultValue[fieldIndex];\n  let defaultValue = pDefaultValue || cDefaultValue;\n  let value = cValue && cValue[fieldIndex];\n\n  const keyPressHandler = (event: any) => {\n    if (Platform.OS !== 'web') {\n      if (event.nativeEvent.key >= 0 && event.nativeEvent.key <= 9) {\n        handleChange && handleChange(event.nativeEvent.key, fieldIndex);\n      } else if (event.nativeEvent.key === 'Backspace') {\n        handleChange && handleChange('', fieldIndex);\n      }\n    }\n  };\n  const textChangeHandler = (value: any) => {\n    // Also used to handle change for Android.\n    handleMultiValueChange && handleMultiValueChange(value, fieldIndex);\n  };\n  const myRef = React.useRef(null);\n  React.useEffect(() => {\n    setRefList && setRefList(myRef, fieldIndex);\n  }, [myRef, fieldIndex, setRefList]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Input\n      //@ts-ignore\n      ref={mergeRefs([myRef, ref])}\n      {...context}\n      {...props}\n      onKeyPress={(event) => keyPressHandler(event)}\n      onChangeText={(value) => textChangeHandler(value)}\n      keyboardType=\"numeric\"\n      defaultValue={defaultValue}\n      value={value}\n    />\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInputFiled));\n"]},"metadata":{},"sourceType":"module"}