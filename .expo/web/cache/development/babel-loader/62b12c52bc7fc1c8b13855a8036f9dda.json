{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"nativeID\", \"isRequired\", \"isInvalid\", \"isDisabled\", \"isReadOnly\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { useId } from '@react-native-aria/utils';\nimport omit from 'lodash.omit';\nimport { ariaAttr } from \"../../../utils\";\nexport var FormControlContext = React.createContext({});\nexport function useFormControlProvider(props) {\n  var idProp = props.nativeID,\n      isRequired = props.isRequired,\n      isInvalid = props.isInvalid,\n      isDisabled = props.isDisabled,\n      isReadOnly = props.isReadOnly,\n      htmlProps = _objectWithoutProperties(props, _excluded);\n\n  var id = useId();\n  var nativeID = idProp || \"field-\".concat(id);\n  var labelId = \"\".concat(nativeID, \"-label\");\n  var feedbackId = \"\".concat(nativeID, \"-feedback\");\n  var helpTextId = \"\".concat(nativeID, \"-helptext\");\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      hasFeedbackText = _React$useState2[0],\n      setHasFeedbackText = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      hasHelpText = _React$useState4[0],\n      setHasHelpText = _React$useState4[1];\n\n  var context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    hasFeedbackText: hasFeedbackText,\n    setHasFeedbackText: setHasFeedbackText,\n    hasHelpText: hasHelpText,\n    setHasHelpText: setHasHelpText,\n    nativeID: nativeID,\n    labelId: labelId,\n    feedbackId: feedbackId,\n    helpTextId: helpTextId,\n    htmlProps: htmlProps\n  };\n  return context;\n}\nexport function useFormControl(props) {\n  var _props$nativeID;\n\n  var field = useFormControlContext();\n  var describedBy = [];\n  if (field !== null && field !== void 0 && field.hasFeedbackText) describedBy.push(field === null || field === void 0 ? void 0 : field.feedbackId);\n  if (field !== null && field !== void 0 && field.hasHelpText) describedBy.push(field === null || field === void 0 ? void 0 : field.helpTextId);\n  var ariaDescribedBy = describedBy.join(' ');\n  var cleanProps = omit(props, ['isInvalid', 'isDisabled', 'isReadOnly', 'isRequired']);\n  return _objectSpread(_objectSpread({}, cleanProps), {}, {\n    nativeID: (_props$nativeID = props.nativeID) !== null && _props$nativeID !== void 0 ? _props$nativeID : field === null || field === void 0 ? void 0 : field.nativeID,\n    disabled: props.isDisabled || (field === null || field === void 0 ? void 0 : field.isDisabled),\n    readOnly: props.isReadOnly || (field === null || field === void 0 ? void 0 : field.isReadOnly),\n    required: props.isRequired || (field === null || field === void 0 ? void 0 : field.isRequired),\n    accessibilityInvalid: ariaAttr(props.isInvalid || (field === null || field === void 0 ? void 0 : field.isInvalid)),\n    accessibilityRequired: ariaAttr(props.isRequired || (field === null || field === void 0 ? void 0 : field.isRequired)),\n    accessibilityReadOnly: ariaAttr(props.isReadOnly || (field === null || field === void 0 ? void 0 : field.isReadOnly)),\n    accessibilityDescribedBy: ariaDescribedBy || undefined\n  });\n}\nexport var useFormControlContext = function useFormControlContext() {\n  return React.useContext(FormControlContext);\n};","map":{"version":3,"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,QAAT;AAOA,OAAO,IAAMC,kBAAkB,GAAGJ,KAAK,CAACK,aAANL,CAAoB,EAApBA,CAA3B;AAEP,OAAO,SAASM,sBAAT,CAAgCC,KAAhC,EAA0D;EAC/D,IACYC,MADZ,GAOID,KAPJ,CACEE,QADF;EAAA,IAEEC,UAFF,GAOIH,KAPJ,CAEEG,UAFF;EAAA,IAGEC,SAHF,GAOIJ,KAPJ,CAGEI,SAHF;EAAA,IAIEC,UAJF,GAOIL,KAPJ,CAIEK,UAJF;EAAA,IAKEC,UALF,GAOIN,KAPJ,CAKEM,UALF;EAAA,IAMKC,SANL,4BAOIP,KAPJ;;EASA,IAAMQ,EAAE,GAAGd,KAAK,EAAhB;EAEA,IAAMQ,QAAQ,GAAGD,MAAM,oBAAaO,EAAb,CAAvB;EAEA,IAAMC,OAAO,aAAMP,QAAN,WAAb;EACA,IAAMQ,UAAU,aAAMR,QAAN,cAAhB;EACA,IAAMS,UAAU,aAAMT,QAAN,cAAhB;;EAMA,sBAA8CT,KAAK,CAACmB,QAANnB,CAAe,KAAfA,CAA9C;EAAA;EAAA,IAAOoB,eAAP;EAAA,IAAwBC,kBAAxB;;EAMA,uBAAsCrB,KAAK,CAACmB,QAANnB,CAAe,KAAfA,CAAtC;EAAA;EAAA,IAAOsB,WAAP;EAAA,IAAoBC,cAApB;;EAEA,IAAMC,OAAO,GAAG;IACdd,UAAU,EAAE,CAAC,CAACA,UADA;IAEdC,SAAS,EAAE,CAAC,CAACA,SAFC;IAGdE,UAAU,EAAE,CAAC,CAACA,UAHA;IAIdD,UAAU,EAAE,CAAC,CAACA,UAJA;IAKdQ,eALc,EAKdA,eALc;IAMdC,kBANc,EAMdA,kBANc;IAOdC,WAPc,EAOdA,WAPc;IAQdC,cARc,EAQdA,cARc;IASdd,QATc,EASdA,QATc;IAUdO,OAVc,EAUdA,OAVc;IAWdC,UAXc,EAWdA,UAXc;IAYdC,UAZc,EAYdA,UAZc;IAadJ;EAbc,CAAhB;EAgBA,OAAOU,OAAP;AACD;AASD,OAAO,SAASC,cAAT,CAAwBlB,KAAxB,EAAkD;EAAA;;EACvD,IAAMmB,KAAK,GAAGC,qBAAqB,EAAnC;EACA,IAAMC,WAAkB,GAAG,EAA3B;EAGA,IAAIF,KAAJ,SAAIA,SAAJ,WAAIA,SAAK,CAAEN,eAAX,EAA4BQ,WAAW,CAACC,IAAZD,CAAiBF,KAAjB,SAAiBA,SAAjB,WAAiBA,GAAjB,MAAiBA,QAAK,CAAET,UAAxBW;EAC5B,IAAIF,KAAJ,SAAIA,SAAJ,WAAIA,SAAK,CAAEJ,WAAX,EAAwBM,WAAW,CAACC,IAAZD,CAAiBF,KAAjB,SAAiBA,SAAjB,WAAiBA,GAAjB,MAAiBA,QAAK,CAAER,UAAxBU;EACxB,IAAME,eAAe,GAAGF,WAAW,CAACG,IAAZH,CAAiB,GAAjBA,CAAxB;EAEA,IAAMI,UAAU,GAAG9B,IAAI,CAACK,KAAD,EAAQ,CAC7B,WAD6B,EAE7B,YAF6B,EAG7B,YAH6B,EAI7B,YAJ6B,CAAR,CAAvB;EAOA,uCACKyB,UADL;IAEEvB,QAAQ,qBAAEF,KAAK,CAACE,QAAR,6DAAoBiB,KAApB,SAAoBA,SAApB,WAAoBA,GAApB,MAAoBA,QAAK,CAAEjB,QAFrC;IAGEwB,QAAQ,EAAE1B,KAAK,CAACK,UAANL,KAAoBmB,KAApB,SAAoBA,SAApB,WAAoBA,GAApB,MAAoBA,QAAK,CAAEd,UAA3BL,CAHZ;IAIE2B,QAAQ,EAAE3B,KAAK,CAACM,UAANN,KAAoBmB,KAApB,SAAoBA,SAApB,WAAoBA,GAApB,MAAoBA,QAAK,CAAEb,UAA3BN,CAJZ;IAKE4B,QAAQ,EAAE5B,KAAK,CAACG,UAANH,KAAoBmB,KAApB,SAAoBA,SAApB,WAAoBA,GAApB,MAAoBA,QAAK,CAAEhB,UAA3BH,CALZ;IAME6B,oBAAoB,EAAEjC,QAAQ,CAACI,KAAK,CAACI,SAANJ,KAAmBmB,KAAnB,SAAmBA,SAAnB,WAAmBA,GAAnB,MAAmBA,QAAK,CAAEf,SAA1BJ,CAAD,CANhC;IAOE8B,qBAAqB,EAAElC,QAAQ,CAACI,KAAK,CAACG,UAANH,KAAoBmB,KAApB,SAAoBA,SAApB,WAAoBA,GAApB,MAAoBA,QAAK,CAAEhB,UAA3BH,CAAD,CAPjC;IAQE+B,qBAAqB,EAAEnC,QAAQ,CAACI,KAAK,CAACM,UAANN,KAAoBmB,KAApB,SAAoBA,SAApB,WAAoBA,GAApB,MAAoBA,QAAK,CAAEb,UAA3BN,CAAD,CARjC;IASEgC,wBAAwB,EAAET,eAAe,IAAIU;EAT/C;AAWD;AAED,OAAO,IAAMb,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAM;EACzC,OAAQ3B,KAAK,CAACyC,UAANzC,CACNI,kBADMJ,CAAR;AADK","names":["React","useId","omit","ariaAttr","FormControlContext","createContext","useFormControlProvider","props","idProp","nativeID","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","id","labelId","feedbackId","helpTextId","useState","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","context","useFormControl","field","useFormControlContext","describedBy","push","ariaDescribedBy","join","cleanProps","disabled","readOnly","required","accessibilityInvalid","accessibilityRequired","accessibilityReadOnly","accessibilityDescribedBy","undefined","useContext"],"sources":["useFormControl.tsx"],"sourcesContent":["import React from 'react';\nimport { useId } from '@react-native-aria/utils';\nimport omit from 'lodash.omit';\nimport type { IFormControlProps } from './types';\nimport { ariaAttr } from '../../../utils';\n\nexport type IFormControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  'htmlProps'\n>;\n\nexport const FormControlContext = React.createContext({});\n\nexport function useFormControlProvider(props: IFormControlProps) {\n  const {\n    nativeID: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props;\n\n  const id = useId();\n  // Generate all the required ids\n  const nativeID = idProp || `field-${id}`;\n\n  const labelId = `${nativeID}-label`;\n  const feedbackId = `${nativeID}-feedback`;\n  const helpTextId = `${nativeID}-helptext`;\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false);\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false);\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    nativeID,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  };\n\n  return context;\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl(props: IFormControlProps) {\n  const field = useFormControlContext();\n  const describedBy: any[] = [];\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText) describedBy.push(field?.feedbackId);\n  if (field?.hasHelpText) describedBy.push(field?.helpTextId);\n  const ariaDescribedBy = describedBy.join(' ');\n\n  const cleanProps = omit(props, [\n    'isInvalid',\n    'isDisabled',\n    'isReadOnly',\n    'isRequired',\n  ]);\n\n  return {\n    ...cleanProps,\n    nativeID: props.nativeID ?? field?.nativeID,\n    disabled: props.isDisabled || field?.isDisabled,\n    readOnly: props.isReadOnly || field?.isReadOnly,\n    required: props.isRequired || field?.isRequired,\n    accessibilityInvalid: ariaAttr(props.isInvalid || field?.isInvalid),\n    accessibilityRequired: ariaAttr(props.isRequired || field?.isRequired),\n    accessibilityReadOnly: ariaAttr(props.isReadOnly || field?.isReadOnly),\n    accessibilityDescribedBy: ariaDescribedBy || undefined,\n  };\n}\n\nexport const useFormControlContext = () => {\n  return (React.useContext(\n    FormControlContext\n  ) as unknown) as IFormControlContext;\n};\n"]},"metadata":{},"sourceType":"module"}